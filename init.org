-*- mode: org; fill-column: 78; -*-
#+TITLE: Emacs configuration file
#+AUTHOR: Tammy Cravit
#+EMAIL: tammymakesthings@gmail.com
#+DATE: Time-stamp: <2021-10-18 12:48:16 tammy>
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle init.el

* About

This is my Emacs configuration. it is designed to be as platform
agnostic as possible, and is tangled into an [[https://orgmode.org/][org]] file with
documentation. The =init.el= file in the repo (copied as
=init.el.firstrun=) takes care of detangling and generating the
=init.el= file that is actually loaded by Emacs.

More details about the detangling process are [[*Detangling][here]].

The master source for this file is [[https://github.com/tammymakesthings/emacs_d][here]].

* Lisp File Header

#+begin_src emacs-lisp :tangle yes
   ;;; -*- mode: emacs-lisp; lexical-binding: t -*-
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;;;; Emacs Configuration - Tammy Cravit - tammymakesthings@gmail.com
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;;;; THIS FILE IS AUTO-GENERATED FROM init.org AND IS REGENERATED EVERY TIME
   ;;;; THAT FILE IS SAVED. DO NOT MAKE ANY MODIFICATIONS TO THIS FILE, OR THEY
   ;;;; WILL BE LOST WHEN THE SOURCE ORG FILE IS CHANGED!
   ;;;;
   ;;;; The latest version of the source org file can be found at:
   ;;;;
   ;;;;     https://github.com/tammymakesthings/emacs_d
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 #+end_src

* Detangling

All changes to the configuration should be done in =init.org=, *not* in
=init.el=. Any changes in the =init.el= will be overwritten by saving
=init.org=. The =init.el= in this repo should not be tracked by git, and
is replaced the first time Emacs is started (assuming it has been renamed
to =~/.emacs.d=).

Emacs can't load =.org=-files directly, but [[https://orgmode.org][org-mode]] provides functions
to extract the code blocks and write them to a file. There are multiple
ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
could just use =org-babel-load-file=, but there are problems with
byte-compilation.

When this configuration is loaded for the first time, the ~init.el~ is
the file that is loaded. It looks like this:

#+begin_src emacs-lisp :tangle init.el.firstrun
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; This file replaces itself with the actual configuration at first run.
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; We can't tangle without org!
  (require 'org)

  (defvar tlc/init-org-file (concat user-emacs-directory "init.org"))
  (defvar tlc/init-el-file  (concat user-emacs-directory "init.el"))

  (find-file tlc/init-org-file)
  (org-babel-tangle)
  (load-file tlc/init-el-file)
  (byte-compile-file tlc/init-el-file)

  (if (file-readable-p (concat user-emacs-directory "dot-gnus.el"))
      (copy-file (concat user-emacs-directory "dot-gnus.el")
                 (file-truename "~/.gnus.el") t t t t))
#+end_src

It tangles the org-file, so that this file is overwritten with the actual
configuration.

There is no reason to track the =init.el= that is generated; by running
the following command =git= will not bother tracking it:

#+begin_src sh :tangle no
  git update-index --assume-unchanged init.el
#+end_src

If one wishes to make changes to the repo-version of =init.el= start
tracking again with:

#+begin_src sh :tangle no
  git update-index --no-assume-unchanged init.el
#+end_src

The =init.el= should (after the first run) mirror the source blocks in
the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
extracts the code blocks from the current file into a source-specific
file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to
the =after-save-hook= ensuring to always tangle and byte-compile the
=org=-document after changes.

#+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Automatically tangle init.org on save to produce init.el
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defvar tlc/init-org-file (concat user-emacs-directory "init.org"))
  (defvar tlc/init-el-file  (concat user-emacs-directory "init.el"))

  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name tlc/init-org-file ))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file tlc/init-el-file)
      ;; copy dot_gnus.el to ~/.gnus.el
      (if (file-readable-p (concat user-emacs-directory "dot-gnus.el"))
         (copy-file (concat user-emacs-directory "dot-gnus.el")
                     (file-truename "~/.gnus.el") t t t t)))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src

I'd like to keep a few settings private, so we load a =private.el= if it
exists after the init-file has loaded.

#+begin_src emacs-lisp
  (add-hook
   'after-init-hook
   (lambda ()
     (let ((private-file (concat user-emacs-directory "private.el")))
       (when (file-exists-p private-file)
         (load-file private-file)))))
#+end_src

* Assumptions

This configuration is written to be as platform-agnostic as I can make
it. However, I do make the following assumptions:

1. You're using [[https://ftp.gnu.org/gnu/emacs/][Emacs]] 26. This will *not* work correctly with previous
   versions of Emacs because of the [[https://github.com/tumashu/posframe][posframe]] library's dependencies.
2. You have [[https://git-scm.com/][Git]] installed, and the =git= executable is in your path.

* Emacs Configurationor
*** Index
***** [[*Preliminaries][Preliminaries]]
***** [[*Package Installation][Package Installation]]
***** [[*Shell Integration][Shell Integration]]
***** [[*Navigation][Navigation]]
***** [[*UI Customizations][UI Customizations]]
***** [[*Editing Customizations][Editing Customizations]]
***** [[*Programming Languages][Programming Languages]]
******* [[*Shell Scripts][Shell Scripts]]
******* [[*Emacs-Lisp][Emacs-Lisp]]
******* [[*Clojure][Clojure]]
******* [[*Python][Python]]
******* [[*Javascript][Javascript]]
******* [[*Lisp][Lisp]]
******* [[*Smalltalk][Smalltalk]]
******* [[*YAML][YAML]]
******* [[*OCAML][OCAML]]
***** [[*Gnus][Gnus]]
***** [[*Org Mode][Org Mode]]
******* [[*Loading Org Mode][Loading Org Mode]]
******* [[*Org/WSL Fix][Org/WSL Fix]]
******* [[*Org File Associations][Org File Associations]]
******* [[*Basic Configuration][Basic Configuration]]
******* [[*Load Most-Used Org Files][Load Most-Used Org Files]]
******* [[*General Helper Functions][General Helper Functions]]
******* [[*Org Key Bindings][Org Key Bindings]]
******* [[*Archiving Settings][Archiving Settings]]
******* [[*Org Agenda Settings][Org Agenda Settings]]
******* [[*Logging Settings][Logging Settings]]
******* [[*Tagging and Keyword Settings][Tagging and Keyword Settings]]
******* [[*Org Source Color Theme][Org Source Color Theme]]
******* [[*Org Property Settings][Org Property Settings]]
******* [[*Org Capture Settings][Org Capture Settings]]
******* [[*Refile Settings][Refile Settings]]
******* [[*Journal Entries][Journal Entries]]
******* [[*Timeclock settings][Timeclock settings]]
******* [[*Org Todo Dependencies][Org Todo Dependencies]]
******* [[*Org Structure and Formatting][Org Structure and Formatting]]
******* [[*Org custom enter key behavior][Org custom enter key behavior]]
******* [[*Org-Babel Settings][Org-Babel Settings]]
******* [[*Org File Skeletons][Org File Skeletons]]
******* [[*Project Functions][Project Functions]]
******* [[*Todo Hooks][Todo Hooks]]
******* [[*Git Integration][Git Integration]]
******* [[*Formula helpers for org tables][Formula helpers for org tables]]
******* [[*Org publishing][Org publishing]]
******* [[*Outlook Integration][Outlook Integration]]
***** [[*LaTeX editing][LaTeX editing]]
***** [[*Gnu Server][Gnu Server]]
***** [[*Miscellaneous Customizations][Miscellaneous Customizations]]
***** [[*customize Settings][customize Settings]]
***** [[*Load OS-specific files][Load OS-specific files]]
***** [[*Load system-specific files][Load system-specific files]]

*** Preliminaries

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Preliminary Configuration Items
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'cl-lib)

#+end_src

Disable checking shell startup files for PATH and MANPATH settings. This
suppresses some spurious errors.

#+begin_src emacs-lisp
  (custom-set-variables
    '(exec-path-from-shell-check-startup-files nil))
#+end_src

Fix some exec-path-from-shell settings that produce spurious errors.

#+begin_src emacs-lisp
  (custom-set-variables
    '(exec-path-from-shell-warn-duration-millis 30000))
#+end_src

Add some variables to the safe-local-variables list.

On Windows, Emacs starts up in the wrong directory. Fix that before we
get too much farther.

#+begin_src emacs-lisp
  ; Set the working directory sensibly on Windows.
  (if (and (eq system-type 'windows-nt) (getenv "HOME") (file-directory-p (getenv "HOME")))
      (cd (getenv "HOME")))
#+end_src

*** Package Installation

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Packaging System Setup/Package Installation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

Set TLS settings for installations.

#+begin_src emacs-lisp
  (with-eval-after-load 'gnutls
    (setq gnutls-verify-error nil)
    (setq gnutls-min-prime-bits 1024)
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
    (when (file-exists-p "/usr/local/etc/libressl/cert.pem")
        (add-to-list 'gnutls-trustfiles "/usr/local/etc/libressl/cert.pem"))
    (when (file-exists-p (file-truename (concat invocation-directory "/../etc/cacert.pem")))
        (add-to-list 'gnutls-trustfiles
           (file-truename (concat invocation-directory "/../etc/cacert.pem")))))
#+end_src

Bootstrap the straight package manager.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let (
      (bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el"
                          user-emacs-directory))
      (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Some extra stuff is needed on MacOS.

#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
     (straight-use-package 'exec-path-from-shell))
#+end_src

And, now we're ready to install packages.

#+begin_src emacs-lisp
(straight-use-package 'flycheck)
(straight-use-package 'all-the-icons)
(straight-use-package 'arduino-mode)
(straight-use-package 'auctex)
(straight-use-package 'reftex)
(straight-use-package 'caml-mode)
(straight-use-package 'cider)
(straight-use-package 'cider-hydra)
(straight-use-package 'clojure-mode)
(straight-use-package 'clojure-mode-extra-font-locking)
(straight-use-package 'coffee-mode)
(straight-use-package 'dash)
(straight-use-package 'dashboard)
(straight-use-package 'dimmer)
(straight-use-package 'doom-themes)
(straight-use-package 'dracula-theme)
(straight-use-package 'git)
(straight-use-package 'gnuplot)
(straight-use-package 'ido-completing-read+)
(straight-use-package 'magit)
(straight-use-package 'magit-org-todos)
(straight-use-package 'magithub)
(straight-use-package 'markdown-mode)
(straight-use-package 'muse)
(straight-use-package 'page-break-lines)
(straight-use-package 'paredit)
(straight-use-package 'posframe)
(straight-use-package 'pretty-hydra)
(straight-use-package 'projectile)
(straight-use-package 'rainbow-delimiters)
(straight-use-package 'slime)
(straight-use-package 'smalltalk-mode)
(straight-use-package 'smex)
(straight-use-package 'tagedit)
(straight-use-package 'tuareg)
(straight-use-package 'ts)
(straight-use-package 'virtualenvwrapper)
(straight-use-package 'yaml-mode)
(straight-use-package 'spice-mode)

(straight-use-package 'py-test)
(straight-use-package 'pyenv-mode-auto)
(straight-use-package 'pylint)
(straight-use-package 'py-autopep8)
(straight-use-package 'pydoc)
(straight-use-package 'pyenv-mode)
(straight-use-package 'python-black)
(straight-use-package 'python-docstring)
;  (straight-use-package 'elpy)
(straight-use-package 'pythonic)

(straight-use-package 'org)
(straight-use-package 'org-super-agenda)
(straight-use-package 'org-sidebar)
(straight-use-package 'org-ql)
(straight-use-package 'noflet)
(straight-use-package 'doct)

(straight-use-package 'fsharp-mode)

(straight-use-package 'swift-mode)
(straight-use-package 'swift-helpful)
(straight-use-package 'swift-playground-mode)
#+end_src

*** Shell Integration

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Shell Integration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

Set up =exec-path-from-shell= to use the user's PATH environment
variable. See [[https://github.com/purcell/exec-path-from-shell][https://github.com/purcell/exec-path-from-shell]] for
details.

#+begin_src emacs-lisp
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-envs
     '("PATH")))
#+end_src

*** Navigation

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Navigation Settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

***** Uniquify Buffer Names

When several buffers visit identically-named files, Emacs must give
the buffers distinct names. The usual method for making buffer names
unique adds ‘<2>’, ‘<3>’, etc. to the end of the buffer names (all but
one of them). The forward naming method includes part of the file's
directory name at the beginning of the buffer name.

https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html

#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src

***** Recent File Mode

Turn on recent file mode so that you can more easily switch to
recently edited files when you first start emacs.

#+begin_src emacs-lisp
  (setq recentf-save-file (concat user-emacs-directory ".recentf"))
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 40)
#+end_src

***** Ido Mode
=ido-mode= allows you to more easily navigate choices. For example,
when you want to switch buffers, ido presents you with a list of
buffers in the the mini-buffer. As you start to type a buffer's name,
=ido= will narrow down the list of buffers to match the text you've
typed in

http://www.emacswiki.org/emacs/InteractivelyDoThings

#+begin_src emacs-lisp :tangle no
  (ido-mode t)
  (setq ido-enable-flex-matching t)
  (setq ido-use-filename-at-point nil)
  (setq ido-auto-merge-work-directories-length -1)
  (setq ido-use-virtual-buffers t)
  (ido-ubiquitous-mode t)
  (ido-everywhere t)
#+end_src

***** Key Binding - Buffer List

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

***** Key Binding - Word Count

#+begin_src emacs-lisp
(global-set-key (kbd "C-x w") 'count-words)
#+end_src

***** Smex - Easier execution of M-x commands.

Smex enhances M-x to allow easier execution of commands. It provides
a filterable list of possible commands in the minibuffer.

http://www.emacswiki.org/emacs/Smex

#+begin_src emacs-lisp
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
#+end_src

***** Projectile - Directory Project Management

#+begin_src emacs-lisp
  (projectile-mode t)
#+end_src

***** Magit - Git UI

#+begin_src emacs-lisp :tangle no
  (require 'magit)

  (if (fboundp 'magit)
      (progn
        (global-set-key (kbd "C-x g") 'magit-status)
        (global-set-key (kbd "C-x M-g") 'magit-dispatch)
        (global-magit-file-mode t)

        (dir-locals-set-class-variables 'huge-git-repository
                                        '((nil . ((magit-refresh-buffers . nil)))))

        (dir-locals-set-directory-class
         (file-truename "~/org-life/ever_org") 'huge-git-repository)
        ))
#+end_src

*** UI Customizations

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; UI Customization
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

These customizations change the way emacs looks and disable/enable
some user interface elements.

Set a variable to be the number of displays on the system. We use this for
adjusting frame sizes, determining when things pup up in a new frame, etc.

#+begin_src emacs-lisp
    (defvar tlc/number-of-displays
      (if window-system
        (length (display-monitor-attributes-list))
       0)
      "The number of monitors on the system. 0 if running in TTY mode.

  Note: This variable does NOT update if the system is
  docked/undocked. It is only set at Emacs startup.")

#+end_src
I'm used to interacting with Emacs in a terminal, so I don't need a
lot of the distracting GUI elements.

#+begin_src emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
#+end_src

Disable startup messages.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
#+end_src

Show the full path in the title bar.

#+begin_src emacs-lisp
  (setq-default frame-title-format "%b (%f)")
#+end_src

Disable the font popup menu.

#+begin_src emacs-lisp
  (global-set-key (kbd "s-t") '(lambda () (interactive)))
#+end_src

Diable the terminal bell.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

***** Show Line Numbers

#+begin_src emacs-lisp
  (if (>= emacs-major-version 26)
      (global-display-line-numbers-mode)
    (global-linum-mode))

  (setq column-number-mode t)
  (setq line-number-mode t)

  (defun tlc/linum-hook (&optional linum-state)
    (if (>= emacs-major-version 26)
        (display-line-numbers-mode (or linum-state 0))
      (linum-mode (or linum-state 0))))
  (add-hook 'org-mode-hook 'tlc/linum-hook)
#+end_src

***** Color Themes/Fonts

Read [[http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/][this article]] for a great explanation of emacs color themes. A
much more technical explanation of the theme system can be found [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][here]].

Initialize the theme system.
#+begin_src emacs-lisp :tangle yes
  (unless (file-directory-p "~/.emacs.d/themes")
    (make-directory "~/.emacs.d/themes"))

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (add-to-list 'load-path "~/.emacs.d/themes")

  (defvar tlc/theme-to-enable 'doom
   "Specify which of the following theme blocks to enable.")
#+end_src

Load the [[https://draculatheme.com/emacs/][dracula]] theme if =tlc/theme-to-enable= is set to ='dracula=.

#+begin_src emacs-lisp
  (when (eq tlc/theme-to-enable 'dracula)
    (progn
      (message "Enabling dracula theme configuration")
      (load-theme 'dracula t)

      (require 'hl-line)
      (set-face-attribute 'default nil :height 140)
      (set-face-background hl-line-face "grey20")))
#+end_src

Load the [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] system if =tlc/theme-to-enable= is set to ='doom=.

#+begin_src emacs-lisp
    (when (eq tlc/theme-to-enable 'doom)
      (progn
        (message "Enabling doom theme configuration")
        (setq doom-themes-enable-bold t)
        (setq doom-themes-enable-italic t)
        (if window-system
            (progn
              (load-theme 'doom-nord t)
              (doom-themes-visual-bell-config)
              (doom-themes-org-config)
              )
          (progn
            (load-theme 'doom-nord t)
            (doom-themes-visual-bell-config)
            (doom-themes-org-config)
            ))

        (setq nlinum-highlight-current-line t)
        (set-face-attribute 'default nil :height 110)
))
#+end_src

***** UI Font Selection

This is a whole lot of code to select a good font based on what's
available on the system.

Fonts we check for, in order:

1. [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]]
2. [[https://github.com/microsoft/cascadia-code/releases][Cascadia Code PL]]
3. [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]
4. [[https://github.com/tonsky/FiraCode][Fira Code]]

The first one of these that's found will be used.

#+begin_src emacs-lisp
  ;; Select a good UI font
  (defvar tlc/frame-font-face nil "Font face for custom-set-faces")
  (defvar tlc/frame-font-size nil "Font size for custom-set-faces")
  
  (if window-system
      (progn
        (cond
         ;; ((find-font (font-spec :name "JetBrains Mono"))
         ;;  (progn
         ;;    (setq tlc/frame-font-face "JetBrains Mono")
         ;;    (setq tlc/frame-font-size 110)))
         ((find-font (font-spec :name "Cascadia Code PL"))
          (progn
            (setq tlc/frame-font-face "Cascadia Code PL")
            (if (eq system-type 'windows-nt)
                (setq tlc/frame-font-size 110)
              (setq tlc/frame-font-size 180))
            ))
         ;; ((find-font (font-spec :name "Source Code Pro"))
         ;;  (progn
         ;;    (setq tlc/frame-font-face "Source Code Pro")
         ;;    (setq tlc/frame-font-size 120)))
         ;; ((find-font (font-spec :name "Fira Code"))
         ;;  (progn
         ;;    (setq tlc/frame-font-face "Fira Code")
         ;;    (setq tlc/frame-font-size 120)))
         )
  
        (if (and tlc/frame-font-face tlc/frame-font-size)
            (progn
              (set-face-attribute 'default nil
                                  :font tlc/frame-font-face
                                  :height tlc/frame-font-size)))))
  
  ;; (if (and window-system (string-equal tlc/frame-font-face "Fira Code"))
  ;;     (use-package fira-code-mode
  ;;       :load-path "git-lisp/fira-code-mode"
  ;;       :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x"))
  ;;       :hook prog-mode))
#+end_src

***** Configure dimmer mode

#+begin_src emacs-lisp
  (require 'dimmer)
  (dimmer-configure-which-key)
  (dimmer-configure-helm)
  (dimmer-mode t)

  (setq dimmer-fraction 0.35)
  (setq dimmer-watch-frame-focus-events nil)
#+end_src

***** Frame Size/Position

Set the initial window size and position if we're running in a GUI. If
we only have one monitor (like on an undocked laptop) we'll start the
window maximized.

#+begin_src emacs-lisp
  (if window-system
    (progn
      (if (and (eq tlc/number-of-displays 1) (eq system-type 'windows-nt))
          ;; One monitor - make the window shorter and mazimize it
          (setq initial-frame-alist '((top . 5) (left . 5) (width . 132)
                                      (height . 32)
                                      (fullscreen . maximized)))
        ;; Multiple monitors - taller window, not maximized
        (setq initial-frame-alist '((top . 15) (left . 15)
                                    (width . 132) (height . 38))))
      (setq default-frame-alist initial-frame-alist)))
#+end_src

***** OS kill ring/clipboard integration

#+begin_src emacs-lisp
  (setq ;; makes killing/yanking interact with the clipboard
        select-enable-clipboard t

        ;; I'm actually not sure what this does but it's recommended?
        select-enable-primary t

        ;; Save clipboard strings into kill ring before replacing them.
        ;; When one selects something in another program to paste it into Emacs,
        ;; but kills something in Emacs before actually pasting it,
        ;; this selection is gone unless this variable is non-nil
        save-interprogram-paste-before-kill t

        ;; Shows all options when running apropos. For more info,
        ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
        apropos-do-all t

        ;; Mouse yank commands yank at point instead of at click.
        mouse-yank-at-point t)
#+end_src

***** Redefine split-window behavior.

For a lot of coding things, Emacs tends to like to split windows
horizontally. For reasons I don't understand, they call this a
vertical split. Also, for reasons I don't understand, this behavior is
shockingly difficult to change.

This code comes from [[https://emacs.stackexchange.com/questions/39034/prefer-vertical-splits-over-horizontal-ones][Stack Overflow]], and it forces Emacs to split
windows vertically unless they're small.

#+begin_src emacs-lisp
  (defun split-window-sensibly-prefer-horizontal (&optional window)
  "Based on split-window-sensibly, but designed to prefer a horizontal split,
  i.e. windows tiled side-by-side."
    (let ((window (or window (selected-window))))
      (or (and (window-splittable-p window t)
           ;; Split window horizontally
           (with-selected-window window
             (split-window-right)))
      (and (window-splittable-p window)
           ;; Split window vertically
           (with-selected-window window
             (split-window-below)))
      (and
           ;; If WINDOW is the only usable window on its frame (it is
           ;; the only one or, not being the only one, all the other
           ;; ones are dedicated) and is not the minibuffer window, try
           ;; to split it horizontally disregarding the value of
           ;; `split-height-threshold'.
           (let ((frame (window-frame window)))
             (or
              (eq window (frame-root-window frame))
              (catch 'done
                (walk-window-tree (lambda (w)
                                    (unless (or (eq w window)
                                                (window-dedicated-p w))
                                      (throw 'done nil)))
                                  frame)
                t)))
       (not (window-minibuffer-p window))
       (let ((split-width-threshold 0))
         (when (window-splittable-p window t)
           (with-selected-window window
                 (split-window-right))))))))

  (defun split-window-really-sensibly (&optional window)
    (let ((window (or window (selected-window))))
      (if (> (window-total-width window) (* 2 (window-total-height window)))
          (with-selected-window window (split-window-sensibly-prefer-horizontal window))
        (with-selected-window window (split-window-sensibly window)))))

  (setq
     split-height-threshold 4
     split-width-threshold 40
     split-window-preferred-function 'split-window-really-sensibly)
#+end_src

This code allows you to toggle the direction the window is split. From [[https://www.emacswiki.org/emacs/ToggleWindowSplit][here]].

#+begin_src emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
           (this-win-2nd (not (and (<= (car this-win-edges)
               (car next-win-edges))
               (<= (cadr this-win-edges)
             (cadr next-win-edges)))))
           (splitter
          (if (= (car this-win-edges)
           (car (window-edges (next-window))))
        'split-window-horizontally
      'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))

  (define-key ctl-x-4-map "t" 'toggle-window-split)
#+end_src

***** Configure mouse integration

Enable tilt (side to side) scrolling with the mouse wheel (or touchpad).

#+begin_src emacs-lisp
  (if (fboundp 'mouse-wheel-mode)
    (progn
      (setq mouse-wheel-flip-direction t)
      (setq mouse-wheel-tilt-scroll t)))
#+end_src

***** Emacs Dashboard

[[https://github.com/emacs-dashboard/emacs-dashboard/][emacs-dashboard]] is an extensible emacs startup screen.

Load the dashboard.

#+begin_src emacs-lisp :tangle no
  (require 'dashboard)

  (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content t)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-items '((recents   . 0)
                          (bookmarks . 5)
                          (projects  . 5)
                          (agenda    . 5)
                          (registers . 0)))
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq show-week-agenda-p t)
  (dashboard-setup-startup-hook)

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

*** Editing Customizations

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Ediitng Customizations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

These customizations affect things related to editing files in
buffers.

Enable a few disabled Emacs commands. Add some [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][advice]] for the
=upcase-region= and =downcase-region= commands so they only work when
a region is active. This prevents you from breaking source code by
activating them inadvertently. (From [[https://www.reddit.com/r/emacs/comments/56qb27/enable_upcasedowncaseregion_but_prevent_accident/][here]]).

#+begin_src emacs-lisp
  (put 'upcase-region   'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'eval-expression 'disabled nil)

  (defun ensure-region-active-advice (func &rest args)
    (when (region-active-p)
      (apply func args)))

  (advice-add 'upcase-region :around 'ensure-region-active-advice)
  (advice-add 'downcase-region :around 'ensure-region-active-advice)
#+end_src

Enable highlighting of matching parens.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

Highlight the current line.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

Don't use hard tabs.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)

  (defun die-tabs ()
    (interactive)
    (set-variable 'tab-width 2)
    (save-excursion
      (push-mark (point))
      (push-mark (point-max) nil t)
      (goto-char (point-min))
      (untabify (region-beginning) (region-end))))
#+end_src

Bind the F7 key to execute ~eval-region~ since I do this a lot when
I'm testing code.

#+begin_src emacs-lisp
(global-set-key (kbd "<f7>") 'eval-region)
#+end_src

Enable saving of your place in files you edit. See [[http://www.emacswiki.org/emacs/SavePlace][here]] for details.

#+begin_src emacs-lisp
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "places"))
#+end_src

Emacs can automatically create backup files. This tells Emacs to
put all backups in =~/.emacs.d/backups=. See [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html][here]] for details.

#+begin_src emacs-lisp
  (unless (file-directory-p (concat user-emacs-directory "backups"))
    (make-directory (concat user-emacs-directory "backups")))

  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
#+end_src

Add the C-; command to comment a line.

#+begin_src emacs-lisp
  (defun toggle-comment-on-line ()
    "comment or uncomment current line"
    (interactive)
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (global-set-key (kbd "C-;") 'toggle-comment-on-line)
#+end_src


Disable electric indent.

#+begin_src emacs-lisp
(setq electric-indent-mode nil)
#+end_src

Enable the Emacs [[https://www.emacswiki.org/emacs/TimeStamp][timestamp]] feature. When this feature is active, the
text =Time-stamp: <>= within the first 8 lines of your file will be
automatically updated to the current time whenever the file is saved.

#+begin_src emacs-lisp
  (when (fboundp 'time-stamp)
    (add-hook 'before-save-hook 'time-stamp))
#+end_src

***** Enable Hippie Expand

[[http://www.emacswiki.org/emacs/HippieExpand][HippieExpand]] ooks at the word before point and tries to expand it in
various ways including expanding from a fixed list (like
=expand-abbrev=), expanding from matching text found in a buffer (like
=dabbrev-expand=) or expanding in ways defined by your own functions.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)

  ;; Lisp-friendly hippie expand
  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol))
#+end_src

***** Isearch Key Bindings

By default, C-s runs =isearch-forward=, so this swaps the bindings.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

*** Programming Languages

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Programming Languages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

Load and configure modes for various programming languages.

***** Shell Scripts

#+begin_src emacs-lisp
  (setq-default sh-basic-offset 2)
  (setq-default sh-indentation 2)
#+end_src

***** Emacs-Lisp

Load paredit mode. I have it disabled because it was making editing
difficult.

#+begin_src emacs-lisp
;;  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)

  ;;(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  ;;(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  ;;(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  ;;(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  ;;(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  ;;(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+end_src


Enable [[http://www.emacswiki.org/emacs/ElDoc][eldoc-mode]], which shows documentation in the minibuffer when
writing code.

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src

***** Clojure

[[https://clojure.org/][Clojure]] is a dynamic, general-purpose functional programming language
based on Lisp, which is compiled to bytecode that runs on the Java
virtual machine. Clojure support for Emacs is provided by [[https://github.com/clojure-emacs/cider][CIDER]].

Enable paredit for clojure.

#+begin_src emacs-lisp
;;;;
; Clojure
;;;;

; (add-hook 'clojure-mode-hook 'enable-paredit-mode)
#+end_src

Enable =subword-mode= for Clojure. This is useful for working with
CamelCasedTokens such as Java class names.

#+begin_src emacs-lisp

;; This is useful for working with camel-case tokens, like names of
;; Java classes (e.g. JavaClassName)
(add-hook 'clojure-mode-hook 'subword-mode)

;; A little more syntax highlighting
(require 'clojure-mode-extra-font-locking)

;; syntax hilighting for midje
(add-hook 'clojure-mode-hook
          (lambda ()
            (setq inferior-lisp-program "lein repl")
            (font-lock-add-keywords
             nil
             '(("(\\(facts?\\)"
                (1 font-lock-keyword-face))
               ("(\\(background?\\)"
                (1 font-lock-keyword-face))))
            (rainbow-delimiters-mode)))

(setq clojure-indent-style 'align-arguments)
;;;;
;; Cider
;;;;

;; provides minibuffer documentation for the code you're typing into the repl
(add-hook 'cider-mode-hook 'eldoc-mode)

;; go right to the REPL buffer when it's finished connecting
(setq cider-repl-pop-to-buffer-on-connect t)

;; When there's a cider error, show its buffer and switch to it
(setq cider-show-error-buffer t)
(setq cider-auto-select-error-buffer t)

;; Where to store the cider history.
(setq cider-repl-history-file "~/.emacs.d/cider-history")

;; Wrap when navigating history.
(setq cider-repl-wrap-history t)

(setq cider-repl-display-help-banner nil)

;; enable paredit in your REPL
; (add-hook 'cider-repl-mode-hook 'paredit-mode)

;; Use clojure mode for other extensions
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
(add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))


;; key bindings
;; these help me out with the way I usually develop web apps
(defun cider-start-http-server ()
  (interactive)
  (cider-load-current-buffer)
  (let ((ns (cider-current-ns)))
    (cider-repl-set-ns ns)
    (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
    (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))

(defun cider-refresh ()
  (interactive)
  (cider-interactive-eval (format "(user/reset)")))

(defun cider-user-ns ()
  (interactive)
  (cider-repl-set-ns "user"))

(eval-after-load 'cider
  '(progn
     (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
     (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
     (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
     (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
#+end_src

***** Markdown

Set up Markdown mode.

#+begin_src emacs-lisp
(defun tlc/markdown-mode-hook nil
  "Setup hook for Markdown mode."
  (interactive)
  (set-fill-column 78)
  (auto-fill-mode t)
  (visual-line-mode t))

(add-hook 'markdown-mode-hook 'tlc/markdown-mode-hook)
#+end_src

Check parens in a Markdown file on saving.

#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook
          (lambda ()
            (when buffer-file-name
              (add-hook 'after-save-hook 'check-parens nil t))))
#+end_src

***** Python

Setup the Python imenu.

#+begin_src emacs-lisp
(defun my-merge-imenu ()
  (interactive)
  (let ((mode-imenu (imenu-default-create-index-function))
        (custom-imenu (imenu--generic-function imenu-generic-expression)))
    (append mode-imenu custom-imenu)))
#+end_src

Define our =python-mode= hooks and key bindings.
#+begin_src emacs-lisp

    (defun tlc/python-hooks ()
      "Hooks for python setup"
      (interactive)
      (setq python-indent-offset 4)
      (setq tab-width 4)
      (setq python-shell-interpreter "ipython")
      (setq python-shell-interpreter-args "-i")
      (if (string-match-p "rita" (or (buffer-file-name) ""))
          (setq indent-tabs-mode t)
        (setq indent-tabs-mode nil))
      (add-to-list
       'imenu-generic-expression
       '("Sections" "^#### \\[ \\(.*\\) \\]$" 1))
      (setq imenu-create-index-function 'my-merge-imenu)

      (define-key python-mode-map (kbd "M-.") 'jedi:goto-definition)
      (define-key python-mode-map (kbd "M-,") 'jedi:goto-definition-pop-marker)
      (define-key python-mode-map (kbd "M-/") 'jedi:show-doc)
      (define-key python-mode-map (kbd "M-?") 'helm-jedi-related-names))

  (eval-after-load "python-mode"
    (add-hook 'python-mode-hook 'tlc/python-hooks))

  (eval-after-load "company"
    '(progn
       (unless (member 'company-jedi (car company-backends))
         (setq comp-back (car company-backends))
         (push 'company-jedi comp-back)
         (setq company-backends (list comp-back)))
       ))
    ;; End Python mode
#+end_src

***** Javascript

Settings for Javascript code editing.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
  (add-hook 'js-mode-hook 'subword-mode)
  (add-hook 'html-mode-hook 'subword-mode)
  (setq js-indent-level 2)
  (eval-after-load "sgml-mode"
    '(progn
       (require 'tagedit)
       (tagedit-add-paredit-like-keybindings)
       (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
#+end_src

And settings for Coffeescript editing.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.coffee.erb$" . coffee-mode))
  (eval-after-load "coffee-mode"
    (progn
      (add-hook 'coffee-mode-hook 'subword-mode)
      (add-hook 'coffee-mode-hook 'highlight-indentation-current-column-mode)
      (add-hook 'coffee-mode-hook
                (defun coffee-mode-newline-and-indent ()
                  (define-key coffee-mode-map "\C-j" 'coffee-newline-and-indent)
                  (setq coffee-cleanup-whitespace nil)))
      (custom-set-variables
       '(coffee-tab-width 2))))
#+end_src

***** Lisp

Emacs does Lisp coding very well, obviously, but we still need to load
[[https://common-lisp.net/project/slime/][SLIME]], the Superior Lisp Editing Mode for Emacs.

#+begin_src emacs-lisp
  (cond
   (
    (eq system-type 'windows-nt)
    (progn
      (setenv "SBCL_HOME" "c:/sbcl")
      (setq inferior-lisp-program "c:/sbcl/sbcl.exe")))
   (t (progn
        (if (file-exists-p (expand-file-name "~/.roswell/helper.el"))
            (progn
              (load (expand-file-name "~/.roswell/helper.el"))
              (setq inferior-lisp-program "ros -Q run"))
          (setq inferior-lisp-program "sbcl")))))
#+end_src

If we have [[https://www.quicklisp.org/beta/][Quicklisp]] installed, we also need to load the Quicklisp
SLIME helper.

#+begin_src emacs-lisp
  (defvar slime-helper-file nil "Location of the quicklisp slime-helper.el")
  (setq slime-helper-file (expand-file-name "~/quicklisp/slime-helper.el"))
  (if (and (fboundp 'slime-mode) (file-readable-p slime-helper-file))
      (load-file slime-helper-file))
#+end_src

***** Smalltalk

Emacs smalltalk-mode customizations.

#+begin_src emacs-lisp
  (setq smalltalk-indent-amount 2)
  (setq smalltalk-indent-align-colon t)
#+end_src

***** YAML

#+begin_src emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src

***** OCAML

#+begin_src emacs-lisp
;; Add the opam lisp dir to the emacs load path
(add-to-list 'load-path
 (replace-regexp-in-string
  "\n" "/share/emacs/site-lisp"
  (shell-command-to-string "opam var prefix")))

(require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")

(autoload 'utop "utop" "Toplevel for OCaml" t)
(setq utop-command "opam exec -- utop -emacs")
(autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
(add-hook 'tuareg-mode-hook 'utop-minor-mode)
#+end_src

#+begin_src emacs-lisp :tangle opam-user-setup.el
;; ## added by OPAM user-setup for emacs / base ## cfd3c9b7837c85cffd0c59de521990f0 ## you can edit, but keep this line
(provide 'opam-user-setup)

;; Base configuration for OPAM

(defun opam-shell-command-to-string (command)
  "Similar to shell-command-to-string, but returns nil unless the process
  returned 0, and ignores stderr (shell-command-to-string ignores return value)"
  (let* ((return-value 0)
         (return-string
          (with-output-to-string
            (setq return-value
                  (with-current-buffer standard-output
                    (process-file shell-file-name nil '(t nil) nil
                                  shell-command-switch command))))))
    (if (= return-value 0) return-string nil)))

(defun opam-update-env (switch)
  "Update the environment to follow current OPAM switch configuration"
  (interactive
   (list
    (let ((default
            (car (split-string (opam-shell-command-to-string "opam switch show --safe")))))
      (completing-read
       (concat "opam switch (" default "): ")
       (split-string (opam-shell-command-to-string "opam switch list -s --safe") "\n")
       nil t nil nil default))))
  (let* ((switch-arg (if (= 0 (length switch)) "" (concat "--switch " switch)))
         (command (concat "opam config env --safe --sexp " switch-arg))
         (env (opam-shell-command-to-string command)))
    (when (and env (not (string= env "")))
      (dolist (var (car (read-from-string env)))
        (setenv (car var) (cadr var))
        (when (string= (car var) "PATH")
          (setq exec-path (split-string (cadr var) path-separator)))))))

(opam-update-env nil)

(defvar opam-share
  (let ((reply (opam-shell-command-to-string "opam config var share --safe")))
    (when reply (substring reply 0 -1))))

(add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))
;; OPAM-installed tools automated detection and initialisation

(defun opam-setup-tuareg ()
  (add-to-list 'load-path (concat opam-share "/tuareg") t)
  (load "tuareg-site-file"))

(defun opam-setup-add-ocaml-hook (h)
  (add-hook 'tuareg-mode-hook h t)
  (add-hook 'caml-mode-hook h t))

(defun opam-setup-complete ()
  (if (require 'company nil t)
    (opam-setup-add-ocaml-hook
      (lambda ()
         (company-mode)
         (defalias 'auto-complete 'company-complete)))
    (require 'auto-complete nil t)))

(defun opam-setup-ocp-indent ()
  (opam-setup-complete)
  (autoload 'ocp-setup-indent "ocp-indent" "Improved indentation for Tuareg mode")
  (autoload 'ocp-indent-caml-mode-setup "ocp-indent" "Improved indentation for Caml mode")
  (add-hook 'tuareg-mode-hook 'ocp-setup-indent t)
  (add-hook 'caml-mode-hook 'ocp-indent-caml-mode-setup  t))

(defun opam-setup-ocp-index ()
  (autoload 'ocp-index-mode "ocp-index" "OCaml code browsing, documentation and completion based on build artefacts")
  (opam-setup-add-ocaml-hook 'ocp-index-mode))

(defun opam-setup-merlin ()
  (opam-setup-complete)
  (require 'merlin)
  (opam-setup-add-ocaml-hook 'merlin-mode)

  (defcustom ocp-index-use-auto-complete nil
    "Use auto-complete with ocp-index (disabled by default by opam-user-setup because merlin is in use)"
    :group 'ocp_index)
  (defcustom merlin-ac-setup 'easy
    "Use auto-complete with merlin (enabled by default by opam-user-setup)"
    :group 'merlin-ac)

  ;; So you can do it on a mac, where `C-<up>` and `C-<down>` are used
  ;; by spaces.
  (define-key merlin-mode-map
    (kbd "C-c <up>") 'merlin-type-enclosing-go-up)
  (define-key merlin-mode-map
    (kbd "C-c <down>") 'merlin-type-enclosing-go-down)
  (set-face-background 'merlin-type-face "skyblue"))

(defun opam-setup-utop ()
  (autoload 'utop "utop" "Toplevel for OCaml" t)
  (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
  (add-hook 'tuareg-mode-hook 'utop-minor-mode))

(defvar opam-tools
  '(("tuareg" . opam-setup-tuareg)
    ("ocp-indent" . opam-setup-ocp-indent)
    ("ocp-index" . opam-setup-ocp-index)
    ("merlin" . opam-setup-merlin)
    ("utop" . opam-setup-utop)))

(defun opam-detect-installed-tools ()
  (let*
      ((command "opam list --installed --short --safe --color=never")
       (names (mapcar 'car opam-tools))
       (command-string (mapconcat 'identity (cons command names) " "))
       (reply (opam-shell-command-to-string command-string)))
    (when reply (split-string reply))))

(defvar opam-tools-installed (opam-detect-installed-tools))

(defun opam-auto-tools-setup ()
  (interactive)
  (dolist (tool opam-tools)
    (when (member (car tool) opam-tools-installed)
     (funcall (symbol-function (cdr tool))))))

(opam-auto-tools-setup)
;; ## end of OPAM user-setup addition for emacs / base ## keep this line
;; ## added by OPAM user-setup for emacs / ocp-indent ## 1d50637ac74cdc1f51f810f74bb84ebf ## you can edit, but keep this line
;; Load ocp-indent from its original switch when not found in current switch
(when (not (assoc "ocp-indent" opam-tools-installed))
  (autoload 'ocp-setup-indent "/Users/tammy/.opam/4.11.1/share/emacs/site-lisp/ocp-indent.el" "Improved indentation for Tuareg mode")
  (autoload 'ocp-indent-caml-mode-setup "/Users/tammy/.opam/4.11.1/share/emacs/site-lisp/ocp-indent.el" "Improved indentation for Caml mode")
  (add-hook 'tuareg-mode-hook 'ocp-setup-indent t)
  (add-hook 'caml-mode-hook 'ocp-indent-caml-mode-setup  t)
  (setq ocp-indent-path "/Users/tammy/.opam/4.11.1/bin/ocp-indent"))
;; ## end of OPAM user-setup addition for emacs / ocp-indent ## keep this line
#+end_src
*** Gnus

Gnus setup is tangled to =dot-gnus.el=, which is moved to =~/.gnus.el= by the
file save hook.

#+begin_src emacs-lisp :tangle dot-gnus.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;; Gnus Settings
  ;;;; AUTO-GENERATED FROM ~/.emacs.d/init.org - OD NOT EDIT DIRECTLY
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (require 'gnus)

  (setq gnus-select-method '(nntp "news.gmane.io"))
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587)
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq send-mail-function 'smtpmail-send-it)

  (define-key gnus-summary-mode-map "d" 'gnus-summary-mark-as-expirable)

  (defun my-message-mode-setup ()
    (setq fill-column 72)
    (turn-on-auto-fill))
  (add-hook 'message-mode-hook 'my-message-mode-setup)
#+end_src

*** Muse Mode

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Muse Mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

Load the Muse mode stuff.

#+begin_src emacs-lisp :tangle yes
  (require 'muse-mode)

  (require 'muse-html)
  (require 'muse-latex)
  (require 'muse-texinfo)
  (require 'muse-project)

  (setq muse-project-alist
    '(
      ("Code Library"
       ("~/projects/muse-codelib" :default "index")
       (:base "html" :path "~/projects/muse-codelib/html")
       (:base "pdf"  :path "~/projects/muse-codelib/pdf")
       )
    ))
#+end_src


*** Org Mode

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Org-Mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

[[https://orgmode.org/][Org mode]] is Emacs's mode for outlining files in plain text. It started
out as an organization and notetaking system, but has been massively
extended to also allow publishing, literate programming, and all sorts
of other stuff. As you'll see, it's VERY customizable.

***** Loading Org Mode

#+begin_src emacs-lisp
    (require 'org)

    ;; Load org extensions
    (require 'org-datetree)
    (require 'org-element)
    (require 'org-protocol)
    (require 'org-id)
    (require 'org-inlinetask)
    (require 'org-mouse)
    (require 'org-protocol)
#+end_src

Load org-babel (code) extensions for languages we use.

#+begin_src emacs-lisp
  (require 'ob-core)
  (require 'ob-eval)
  
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((dot . t)
      (emacs-lisp . t)
      (js . t)
      (python . t)
      (ruby . t)
      (shell . t)
      (arduino . t)
      (forth . t)
      (latex . t)
      (perl . t)
      (eshell . t)
      (gnuplot . t)
      (clojure . t)
      (sql . t)
      (haskell . t)
      (ocaml . t)
      (lisp . t)
      (org . t)
      (arduino . t)
     )
    )
#+end_src

Since version 8, Org uses a modular exporter. Load the exporter pieces
we need.

#+begin_src emacs-lisp :tangle no
  (require 'ox-publish)
  (require 'ox-html)
  (require 'ox-latex)
  (require 'ox-ascii)
  (require 'ox-md)
  (require 'ox-man)
  (require 'ox-org)
  (require 'ox-texinfo)
#+end_src

#+begin_src emacs-lisp
(setq org-export-backends '(org latex taskjuggler publish html ascii md texinfo))
#+end_src

***** Org Text Export

This is a hack to allow me to tangle literal text blocks from org files with
babel.

Create the hack file.

#+begin_src emacs-lisp :tangle "ob-text.el"
  ;;; ob-text.el --- Tangle raw text blocks in org=babel.
  ;; Copyright 2020 Tammy Cravit
  ;;
  ;; License: GNU General Public License version 3, or (at your option) any later version
  ;; Author: Tammy Cravit <tammymakesthings@gmail.com>
  ;; Maintainer: Tammy Cravit <tammymakesthings@gmail.com>
  ;; Keywords: org babel text
  ;; URL: https://github.com/tammymakesthings/ob-text
  ;; Created: 2020-03-13
  ;; Version: 0.1
  ;; Package-Requires: ((org "8"))
  ;
  ;;; Commentary:
  ;; Supports tangling literal text blocks from Org files.

  (require 'org)
  (require 'ob)

  (defgroup ob-text nil "Tangle raw text blocks." :group 'org)
  (defcustom ob-text:default-dest "ob-text.txt"
    "Default destination for tangled text blocks."
    :group 'ob-text :type 'string)

  ;;;###autoload
  (defun org-babel-execute:text (body params)
    "org-babel execution hook."
    (let (
          (text (or (cddr (assoc :var params))
                    body
                    "")))
      text))

  ;;;###autoload
  (eval-after-load "org"
    '(add-to-list 'org-src-lang-modes '("text" . text)))

  (provide 'ob-text)
#end_src

And now we load it.

#+begin_src emacs-lisp
  (require 'ob-text)
#+end_src

***** Org/WSL Fix

Under Windows (especially with WSL) =org-open-file= will use
=start-proces-shell-command=. This can cause 100% CPU and blocking. We can fix
this by using =advice-add= to advise =org-open-file= to use
=call-process-shell-command= instead. This is from [[https://vxlabs.com/2020/03/07/patch-emacs-org-open-file-using-advice/][here]].

#+begin_src emacs-lisp :tangle yes
  (if (eq system-type 'windows-nt)
      (progn
        (defun wsl-fix-org-open-file (orig-org-open-file &rest args)
          (cl-letf (((symbol-function 'start-process-shell-command) #'call-process-shell-command))
            (apply orig-org-open-file args)))
        (advice-add #'org-open-file :around #'wsl-fix-org-open-file)))
#+end_src

***** Org File Associations

We'll make org-mode the default for new buffers, as well as for text
files.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org_archive$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))

  (setq default-major-mode 'org-mode)
#+end_src

We need to locate our =org-life= directory, either from github or
Dropbox. We prefer the github repo, and will clone it if we can't find
it.

#+begin_src emacs-lisp
  (defvar tlc/org-github-repo nil "Github directory for my org-life files")
  (setq tlc/org-github-repo "git@github.com:tammymakesthings/org_life.git")
  
  (defvar tlc/org-life-locations 
    '(
      (expand-file-name "~/org-life")
      (expand-file-name "~/Dropbox/org-life")
      (expand-file-name "~/Projects/org-life")) 
    "The list of possible org-life locations")
  
  (setq org-directory (expand-file-name "~/org-life"))

  (let (test-locations tlc/org-life-locations)
    (while test-locations
            (if (or (file-directory-p (car test-locations))
                    (file-symlink-p (car test-locations)))
                (progn
                  (message "Setting org directory to %s" (car test-locations))
                  (setq org-directory (expand-file-name (car test-locations)))
                  (setq test-locations (cdr test-locations))))
            (setq test-locations (cdr test-locations))))
  
  (unless (file-directory-p org-directory)
    (if (yes-or-no-p (concat "Org directory \"" org-directory "\" not found - clone from Github?"))
        (shell-command (concat "git clone " tlc/org-github-repo " " (expand-file-name org-directory)))))
#+end_src

***** Basic Configuration

Set the default notes file.

#+begin_src emacs-lisp
  (setq org-default-notes-file (expand-file-name (concat org-directory "/personal.org")))
#+end_src

Set org indent settings.

#+begin_src emacs-lisp
  (setq org-indent-mode t)
  (setq org-hide-leading-stars t)
  (setq org-odd-levels-only t)
  (setq org-adapt-indentation t)
  (setq org-indent-indentation-per-level 2)
  (setq org-blank-before-new-entry '(
                                     (heading . nil) 
                                     (plain-list-item . nil)))
  (setq org-ascii-headline-spacing 0)
#+end_src

Enforce dependencies on TODOs and checkbox lists - the parent cannot be marked
as complete if it has incomplete children.

#+begin_src emacs-lisp
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
#+end_src

Enable some enhanced keyboard commands.

#+begin_src emacs-lisp
  (setq org-special-ctrl-a/e t)
  (setq org-use-speed-commands t)
#+end_src

Set a few miscellaneous settings.

#+begin_src emacs-lisp
  (setq require-final-newline t)
  (setq org-clone-delete-id t)
  (setq org-src-fontify-natively t)
  (setq org-catch-invisible-edits 'smart)

  (setq org-cycle-include-plain-lists t)
  (setq org-cycle-max-level 3)
  (setq org-alphabetical-lists t)
  (setq org-blank-before-new-entry '((heading . auto) (plain-list-item . nil)))
#+end_src

Default startup settings for when we're opening new org files.

#+begin_src emacs-lisp
  (setq org-startup-truncated nil)
  (setq org-startup-folded nil)
  (setq org-startup-indented t)
#+end_src

Enable =font-lock-mode= and =fill-mode= in org files.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-font-lock)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src

Setup =org-ctags=.

#+begin_src emacs-lisp :tangle no
    (if (fboundp 'org-ctags)
        (progn
          (if (eq system-type 'windows-nt)
              (setq org-ctags-path-to-ctags "c:/utils/ctags.exe")
            (setq org-ctags-path-to-ctags "/usr/local/bin/ctags"))
          (add-hook 'org-mode-hook
                    (lambda ()
                      (define-key org-mode-map "\C-co" 'org-ctags-find-tag-interactive)))
          (setq org-ctags-open-link-functions
                '(org-ctags-find-tag
                  org-ctags-ask-rebuild-tags-file-then-find-tag
                  org-ctags-ask-append-topic
                  org-ctags-fail-silently))
          ))
#+end_src

***** Provide =org-adjust-region= for indentation.

From [[https://emacs.stackexchange.com/questions/20555/indenting-lists-in-org-mode][here]]. Adjusts the behavior of =paragraph-fill= to do sensible things with
org lists.

#+begin_src emacs-lisp
  (defun tobias/org-adjust-region (b e)
    "Re-adjust stuff in region according to the preceeding stuff."
    (interactive "r") ;; current region
    (save-excursion
      (let ((e (set-marker (make-marker) e))
        (_indent (lambda ()
               (insert ?\n)
               (backward-char)
               (org-indent-line)
               (delete-char 1)))
        last-item-pos)
        (goto-char b)
        (beginning-of-line)
        (while (< (point) e)
      (indent-line-to 0)
      (cond
       ((looking-at "[[:space:]]*$")) ;; ignore empty lines
       ((org-at-heading-p)) ;; just leave the zero-indent
       ((org-at-item-p)
        (funcall _indent)
        (let ((struct (org-list-struct))
          (mark-active nil))
          (ignore-errors (org-list-indent-item-generic -1 t struct)))
        (setq last-item-pos (point))
        (when current-prefix-arg
          (fill-paragraph)))
       ((org-at-block-p)
        (funcall _indent)
        (goto-char (plist-get (cadr (org-element-special-block-parser e nil)) :contents-end))
        (org-indent-line))
       (t (funcall _indent)))
      (forward-line))
        (when last-item-pos
      (goto-char last-item-pos)
      (org-list-repair)
      ))))

  (define-key org-mode-map (kbd "C-+") 'tobias/org-adjust-region)
#+end_src

***** Load Most-Used Org Files

Define a function to open our most used files with a keystroke.

#+begin_src emacs-lisp
  
  (defvar tlc/org-master-files '("inbox.org"
                                 "work.org"
                                 "personal.org"
                                 "someday.org")
    "List of files for tlc/open-org-files to open.
  
        File names are relative to org-directory.")
  
  (defvar tlc/default-master-file
    (cond
     ((bound-and-true-p tlc/org-master-files) (nth 0 tlc/org-master-files))
     (t "inbox.org"))
    "Defines the default master file to switch to when tlc/open-org-files runs.")
  
  (defun tlc/open-org-files ()
    "Open the default set of org files.
  
        The default set of org files is specified by tlc/org-master-files."
    (interactive)
  
    (let ((default-directory org-directory))
      (shell-command "git pull"))
  
    (if (length tlc/org-master-files)
        (progn
          (let (value)
            (dolist (elt tlc/org-master-files value)
              (find-file-noselect (concat org-directory "/" elt))))
          (switch-to-buffer tlc/default-master-file))
      (message "Add your master org files to tlc/org-master-files and try again")))
  
  (setq tlc/default-master-file "work.org")
  (global-set-key (kbd "<f12>") 'tlc/open-org-files)
  (global-set-key "\C-c=" 'tlc/open-org-files)
#+end_src

***** General Helper Functions

******* Cut and paste subtrees

From [[https://pages.sachachua.com/.emacs.d/Sacha.html#orgfe5d909][sacha chua]] - makes it easier to cut something and paste elsewhere in the
hierarchy.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (global-set-key "\C-ck" 'org-cut-subtree)
    (setq org-yank-adjusted-subtrees t))
#+end_src

******* Add a Folded Property to a Subtree

This code sets the STARTUP "folded" property for the currently
selected subtree.

#+begin_src emacs-lisp
  (defun tlc/org-add-folded-property nil
    "Add the STARTUP folded property to the subtree at point."
    (interactive)
    (org-set-property "VISIBILITY" "folded"))
#+end_src

******* Check for misplaced SCHEDULED and DEADLINE cookies

From [[https://orgmode.org/worg/org-hacks.html][here]].

#+begin_src emacs-lisp
(defun org-check-misplaced-cookies ()
  "Check misformatted entries in the current buffer."
  (interactive)
  (outline-show-all)
  (org-map-entries
   (lambda ()
     (when (and (move-beginning-of-line 2)
                (not (looking-at org-heading-regexp)))
       (if (or (and (org-get-scheduled-time (point))
                    (not (looking-at (concat "^.*" org-scheduled-regexp))))
               (and (org-get-deadline-time (point))
                    (not (looking-at (concat "^.*" org-deadline-regexp)))))
           (when (y-or-n-p "Fix this subtree? ")
             (message "Call the function again when you're done fixing this
subtree.")
             (recursive-edit))
         (message "All subtrees checked."))))))
#+end_src

******* Sort an org list by checkbox type.

From [[https://orgmode.org/worg/org-hacks.html][here]].

#+begin_src emacs-lisp
(defun org-sort-list-by-checkbox-type ()
  "Sort list items according to Checkbox state."
  (interactive)
  (org-sort-list
   nil ?f
   (lambda ()
     (if (looking-at org-list-full-item-re)
         (cdr (assoc (match-string 3)
                     '(("[X]" . 1) ("[-]" . 2) ("[ ]" . 3) (nil . 4))))
       4))))
#+end_src

******* Mark a subtree done along with all subheadings

From [[https://orgmode.org/worg/org-hacks.html][here]].

#+begin_src emacs-lisp
(defun org-mark-subtree-done ()
  (interactive)
  (org-mark-subtree)
  (let ((limit (point)))
    (save-excursion
      (exchange-point-and-mark)
      (while (> (point) limit)
        (org-todo "DONE")
        (outline-previous-visible-heading 1))
      (org-todo "DONE"))))
#+end_src

***** Org Key Bindings
#+begin_src emacs-lisp
  ;;;;;;;;;;
  ;; Org-Mode Global Key Bindings
  ;;;;;;;;;;

  (global-set-key "\C-cc"      'org-capture)
  (global-set-key "\C-cl"      'org-store-link)
  (global-set-key "\C-c\C-l"   'org-insert-link)
  (global-set-key "\C-ca"      'org-agenda)
  (global-set-key "\C-cb"      'org-iswitchb)
  (global-set-key "\C-cr"      'org-refile)
  (global-set-key "\C-c/"      'org-agenda-list)
  (global-set-key (kbd "<f7>") 'org-agenda)
  (global-set-key (kbd "<f8>") 'org-agenda-list)


  ;;;;;;;;;;
  ;; Local Key Bindings
  ;;;;;;;;;;

  (define-key org-mode-map "\C-cp"       'org-insert-property-drawer)
  (define-key org-mode-map "\C-c/"       'tlc/org-add-folded-property)
  (define-key org-mode-map (kbd "<f4>")  'org-table-recalculate-buffer-tables)
#+end_src

Enable the [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] sidebar. We also load [[https://github.com/alphapapa/org-ql][org-ql]] (for querying) and
[[https://github.com/alphapapa/org-sidebar][org-sidebar]] (to allow opening stuff in the sidebar window) here.

#+begin_src emacs-lisp
  (require 'org-super-agenda)
  (require 'org-ql)
  (require 'org-sidebar)

  (defun tlc/org-sidebar-toggle (&optional turn-on-both)
    "Turn on org sidebars."
    (interactive)
    (org-sidebar-toggle)
    (org-sidebar-tree-toggle))
  (define-key org-mode-map "\C-c\/" 'tlc/org-sidebar-toggle)
#+end_src

***** Archiving Settings

Set the default archiving location and options.

#+begin_src emacs-lisp
  (defvar tlc/org-archive-directory (file-truename (concat org-directory "/archive")))
  (if (not (file-directory-p tlc/org-archive-directory))
      (progn
        (message "Creating org archive directory: %s" tlc/org-archive-directory)
        (make-directory tlc/org-archive-directory)))
  
  (setq org-archive-location
        (concat
         tlc/org-archive-directory
         "e/%s_archive_"
         (prin1-to-string (nth 5 (parse-time-string (current-time-string))))
         "::datetree/* Archive"
         ))
  
  (setq org-archive-mark-done t)
  (setq org-archive-reversed-order t)
#+end_src

This bunch of code archives subtree hierarchies. From [[https://gist.github.com/kepi/2f4acc3cc93403c75fbba5684c5d852d][here]].

#+begin_src emacs-lisp :tangle org-archive-subtree-hierarchical.el
;; org-archive-subtree-hierarchical.el
;;
;; version 0.2
;; modified from https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00109.html
;; modified from https://stackoverflow.com/a/35475878/259187

;; In orgmode
;; * A
;; ** AA
;; *** AAA
;; ** AB
;; *** ABA
;; Archiving AA will remove the subtree from the original file and create
;; it like that in archive target:

;; * AA
;; ** AAA

;; And this give you
;; * A
;; ** AA
;; *** AAA
;;
;; Install file to your include path and include in your init file with:
;;
;;  (require 'org-archive-subtree-hierarchical)
;;  (setq org-archive-default-command 'org-archive-subtree-hierarchical)
;;
(provide 'org-archive-subtree-hierarchical)
(require 'org-archive)

(defun org-archive-subtree-hierarchical--line-content-as-string ()
  "Returns the content of the current line as a string"
  (save-excursion
    (beginning-of-line)
    (buffer-substring-no-properties
     (line-beginning-position) (line-end-position))))

(defun org-archive-subtree-hierarchical--org-child-list ()
  "This function returns all children of a heading as a list. "
  (interactive)
  (save-excursion
    ;; this only works with org-version > 8.0, since in previous
    ;; org-mode versions the function (org-outline-level) returns
    ;; gargabe when the point is not on a heading.
    (if (= (org-outline-level) 0)
        (outline-next-visible-heading 1)
      (org-goto-first-child))
    (let ((child-list (list (org-archive-subtree-hierarchical--line-content-as-string))))
      (while (org-goto-sibling)
        (setq child-list (cons (org-archive-subtree-hierarchical--line-content-as-string) child-list)))
      child-list)))

(defun org-archive-subtree-hierarchical--org-struct-subtree ()
  "This function returns the tree structure in which a subtree
belongs as a list."
  (interactive)
  (let ((archive-tree nil))
    (save-excursion
      (while (org-up-heading-safe)
        (let ((heading
               (buffer-substring-no-properties
                (line-beginning-position) (line-end-position))))
          (if (eq archive-tree nil)
              (setq archive-tree (list heading))
            (setq archive-tree (cons heading archive-tree))))))
    archive-tree))

(defun org-archive-subtree-hierarchical ()
  "This function archives a subtree hierarchical"
  (interactive)
  (let ((org-tree (org-archive-subtree-hierarchical--org-struct-subtree))
        (this-buffer (current-buffer))
        (file (abbreviate-file-name
               (or (buffer-file-name (buffer-base-buffer))
                   (error "No file associated to buffer")))))
    (save-excursion
      (setq location org-archive-location
            afile (car (org-archive--compute-location
                       (or (org-entry-get nil "ARCHIVE" 'inherit) location)))
            ;; heading (org-extract-archive-heading location)
            infile-p (equal file (abbreviate-file-name (or afile ""))))
      (unless afile
        (error "Invalid `org-archive-location'"))
      (if (> (length afile) 0)
          (setq newfile-p (not (file-exists-p afile))
                visiting (find-buffer-visiting afile)
                buffer (or visiting (find-file-noselect afile)))
        (setq buffer (current-buffer)))
      (unless buffer
        (error "Cannot access file \"%s\"" afile))
      (org-cut-subtree)
      (set-buffer buffer)
      (org-mode)
      (goto-char (point-min))
      (while (not (equal org-tree nil))
        (let ((child-list (org-archive-subtree-hierarchical--org-child-list)))
          (if (member (car org-tree) child-list)
              (progn
                (search-forward (car org-tree) nil t)
                (setq org-tree (cdr org-tree)))
            (progn
              (goto-char (point-max))
              (newline)
              (org-insert-struct org-tree)
              (setq org-tree nil)))))
      (newline)
      (org-yank)
      (when (not (eq this-buffer buffer))
        (save-buffer))
      (message "Subtree archived %s"
               (concat "in file: " (abbreviate-file-name afile))))))

(defun org-insert-struct (struct)
  "TODO"
  (interactive)
  (when struct
    (insert (car struct))
    (newline)
    (org-insert-struct (cdr struct))))

(defun org-archive-subtree ()
  (org-archive-subtree-hierarchical)
  )
#+end_src

And here's how we use it.

#+begin_src emacs-lisp :tangle no
  (when (file-exists-p "org-archive-subtree-hierarchical.el")
    (progn
      (require 'org-archive-subtree-hierarchical)
      (setq org-archive-default-command 'org-archive-subtree-hierarchical)))
#+end_src

***** Org Agenda Settings

Set general org-agenda options.

#+begin_src emacs-lisp
  (setq org-deadline-warning-days 3)
  (setq org-agenda-skip-additional-timestamps-same-entry t)
  (setq org-todo-repeat-to-state "TODO")
  
  (setq org-agenda-skip-archived-trees t)1
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-timestamp-if-done t)
  
  (setq org-agenda-skip-scheduled-if-deadline-is-shown 'repeated-after-deadline)
  (setq org-agenda-skip-timestamp-if-deadline-is-shown t)
  
  (setq org-agenda-include-diary t)
  (setq org-agenda-tags-todo-honor-ignore-options t)
  (setq org-agenda-todo-list-sublevels nil)
  
  (add-hook 'org-agenda-mode-hook (lambda () (hl-line-mode 1)))
#+end_src

Set some options that speed up agenda processing.

#+begin_src emacs-lisp
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-inhibit-startup t)
  (setq org-agenda-use-tag-inheritance t)
  (setq org-agenda-ignore-properties '(effort appt category))
#+end_src

Generate the diary file in =~/.emacs.d/diary=.

First we define a helper function to create a repeating entry for each
weekday.

#+begin_src emacs-lisp
  (defun tlc/diary-weekly-entry (time description &optional work-week include-days exclude-days)
    "Create a repeating diary entry on all weekdays.

time - A valid diary time specifier
description - the description of the meeting
work-week - if non-nil, restrict to the work week
include-days - if a list of days, use those instead of the default list
exclude-days - it a list of days, events for those days are skipped"
    (interactive)
    (let
        (daynames)
      (progn
        (cond
         ((and include-days (listp include-days)) (setq daynames include-days))
         (work-week (setq daynames '("Monday" "Tuesday" "Wednesday" "Thursday" "Friday")))
         (t (setq daynames '("Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday"))))
        (while daynames
          (if (and exclude-days (listp exclude-days))
              (if (not (member (car daynames) exclude-days))
                  (insert (concat (car daynames) " " time " " description "\n")))
            (insert (concat (car daynames) " " time " " description "\n")))
            (setq daynames (cdr daynames))))))
#+end_src

Now actually create the diary file.

#+begin_src org text :tangle ~/.emacs.d/diary
%%(diary-day-of-year)
%%(diary-hebrew-date)

%%(diary-hebrew-rosh-hodesh)
%%(diary-hebrew-parasha)
%%(diary-hebrew-sabbath-candles)
%%(diary-hebrew-omer)

%%(diary-sunrise) Sunrise in %s
%%(diary-sunset) Sunrise in %s
%%(org-lunar-phases)

%%(diary-hebrew-yahrzeit 3 13 2018) Dave Lepek
%%(diary-hebrew-yahrzeit 4 18 2012) Grandma
%%(diary-hebrew-yahrzeit 12 29 2013) Grandpa
%%(diary-hebrew-yahrzeit 4 20 2020) Uncle Irv

%%(diary-anniversary 3 13 2018) Dave's passing
%%(diary-anniversary 4 23 2013) Started at Mindbody
%%(diary-anniversary 7 2 2020) Mindbody separation
%%(diary-anniversary 7 27 2020) Started at BCBSAZ
%%(diary-anniversary 11 2 1998) Transition
%%(diary-anniversary 11 4 2015) Bottom Surgery
%%(diary-anniversary 7 6 2021) Hospitalization - DKA
%%(diary-remind '(diary-anniversary 4 19 1945) 7) Birthday: Dad
%%(diary-remind '(diary-anniversary 6 04 1959) 7) Birthday: Cynthia
%%(diary-remind '(diary-anniversary 8 04 1977) 7) Birthday: Joanna
%%(diary-remind '(diary-anniversary 10 21 1973) 7) Birthday: Me
%%(diary-remind '(diary-anniversary 10 22 2017) 7) Birthday: Charlie
%%(diary-remind '(diary-anniversary 11 03 1946) 7) Birthday: Mom
%%(diary-remind '(diary-anniversary 12 29 1940) 7) Birthday: Irwin
6:00 Check Blood Sugar
11:00 Check Blood Sugar
17:00 Check Blood Sugar
22:00 Check Blood Sugar
6:30 Eat Breakfast
11:15 Eat Lunch
17:00 Eat Dinner
%%(diary-hebrew-birthday month day year)
%%(diary-cyclic 14 6 30 2020) Payday
%%(diary-cyclic 14 6 24 2020) Payday
%%(diary-float 11 4 4) Thanksgiving
Monday 9:30am Collaboration Time
Tuesday 9:30am Collaboration Time
Wednesday 9:30am Collaboration Time
Thursday 9:30am Collaboration Time
Friday 9:30am Collaboration Time
Monday 10:00am Gatos de Datos DSU
Tuesday10:00am Gatos de Datos DSU
Wednesday 10:00am Gatos de Datos DSU
Thursday 10:00am Gatos de Datos DSU
#+end_src

Define some display properties for the diary.

#+begin_src emacs-lisp
 (setq view-diary-entries-initially t
       mark-diary-entries-in-calendar t)

 (add-hook 'diary-display-hook 'fancy-diary-display)
 (add-hook 'diary-list-entries-hook 'diary-sort-entries t)
 (add-hook 'today-visible-calendar-hook 'calendar-mark-today)
#+end_src

Include sunrise and sunset in the diary. From [[https://orgmode.org/worg/org-hacks.html#org6abe7b1][here]], modified to do location
lookups from the ~known-locations-alist~ alist.

#+begin_src emacs-lisp
  (defcustom known-locations-alist nil "Known locations for sunrise/sunset calculations"
                             :type '(alist :key-type string :value-type (group float float))
                             :group 'diary)

  (custom-set-variables '(known-locations-alist
      (quote
          (("Phoenix, AZ" 33.45455 -112.05573)
           ("Scottsdale, AZ" 33.4942 -111.9261)
           ("San Luis Obispo, CA" 35.2828 -120.6596)
           ("Toronto, Ont" 43.6532 -79.3832)
           ; Default location - do not remove
           ("Groom Lake, NV" 37.234332396 -115.80666344)))))

  ;; Set the current location. Should match a lookup in known-locations-alist.
  (setq calendar-location-name "Phoenix, AZ")

  ;; Look up and set latitude and longitude.
  (unless (assoc calendar-location-name known-locations-alist)
      (setq calendar-location-name "Groom Lake, NV"))

  (setq calendar-latitude  (nth 1 (assoc calendar-location-name known-locations-alist)))
  (setq calendar-longitude (nth 2 (assoc calendar-location-name known-locations-alist)))

  (autoload 'solar-sunrise-sunset "solar.el")
  (autoload 'solar-time-string "solar.el")

  (defun diary-sunrise ()
    "Local time of sunrise as a diary entry.
  The diary entry can contain `%s' which will be replaced with
  `calendar-location-name'."
    (let ((l (solar-sunrise-sunset date)))
      (when (car l)
        (concat
         (if (string= entry "")
             "Sunrise"
           (format entry (eval calendar-location-name))) " "
           (solar-time-string (caar l) nil)))))

  (defun diary-sunset ()
    "Local time of sunset as a diary entry.
  The diary entry can contain `%s' which will be replaced with
  `calendar-location-name'."
    (let ((l (solar-sunrise-sunset date)))
      (when (cadr l)
        (concat
         (if (string= entry "")
             "Sunset"
           (format entry (eval calendar-location-name))) " "
           (solar-time-string (caadr l) nil)))))

  (with-no-warnings (defvar date))
  (defun org-lunar-phases ()
    "Show lunar phase in Agenda buffer."
    (require 'lunar)
   (let* ((phase-list (lunar-phase-list (nth 0 date) (nth 2 date)))
           (phase (cl-find-if (lambda (phase) (equal (car phase) date))
                              phase-list)))
      (when phase
        (setq ret (concat (lunar-phase-name (nth 2 phase)) " "
                          (substring (nth 1 phase) 0 5))))))

  (setq lunar-phase-names
        '("● New Moon" ; Unicode symbol: 🌑 Use full circle as fallback
          "☽ First Quarter Moon"
          "○ Full Moon" ; Unicode symbol: 🌕 Use empty circle as fallback
          "☾ Last Quarter Moon"))
#+end_src

Set up where org windows appear.

#+begin_src emacs-lisp
  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-restore-windows-after-quit t)
#+end_src

Specify our =org-agenda-files=. We define lists of personal and work project
files (=tlc/org-personal-project-files= and
=tlc/org-work-project-files=). Next we build the personal and work agenda file
lists from those and the corresponding non-project lists
(=tlc/org-personal-agenda-files= and =tlc/org-work-agenda-files=). Finally we
set =org-agenda-files= to be the union of =tlc/org-personal-agenda-files= and
=tlc/org-work-agenda-files=. This seems like a lot of contortion, but then our
agendas (defined in =org-agenda-custom-commands=) are automatically filtered.

#+begin_src emacs-lisp
  (defvar tlc/org-personal-agenda-files nil "Personal agenda files for filtered views.")
  (defvar tlc/org-work-agenda-files nil "Work agenda files for filtered views.")
  (defvar tlc/org-personal-project-files nil "Personal projects to include in agenda.")
  (defvar tlc/org-work-project-files nil "Work projects to include in agenda.")
  
  (setq tlc/org-personal-project-files (list
                                      (concat org-directory "/proj_transformation_2e.org")
                                      (concat org-directory "/proj_az_mystery_1.org")
                                      ))
  
  (setq tlc/org-work-project-files nil)
  
  (setq tlc/org-personal-agenda-files (cl-union
                                       (list
                                        (concat org-directory "/calls.org")
                                        (concat org-directory "/personal.org"))
                                      tlc/org-personal-project-files))
  
  (setq tlc/org-work-agenda-files (cl-union
                                   (list
                                    (concat org-directory "/work.org")
                                    (concat org-directory "/master.org")
                                    (concat org-directory "/calls.org"))
                                   tlc/org-work-project-files))
  
  (setq org-agenda-files (cl-remove-if-not 
                          'file-exists-p 
                          (append 
                           tlc/org-personal-agenda-files 
                           tlc/org-work-agenda-files)))
#+end_src

Helper function for =org-agenda-custom-commands= to skip a subtree if
it has a particular priority. From [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron's blog]].

#+begin_src emacs-lisp
  (defun air/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))
#+end_src

******* Define custom agenda views.

We define a custom daily combined agenda, and custom daily work and personal
agendas. These have essentially the same definitions, except they are filtered
to =org-agenda-files=, =tlc/org-work-agenda-files= and
=tlc/org-personal-agenda-files=, respectively.

Initialize =org-agenda-custom-commands= to be empty.

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands nil)
#+end_src

Define the view for the combined agenda.

#+begin_src emacs-lisp
  (add-to-list 'org-agenda-custom-commands
               '("Z" "Today's Agenda - Combined"
                 (
                  (agenda "" (
                              (org-agenda-span 1)
                              (org-agenda-overriding-header "***** Today's Agenda:"))
                          )
                  (tags-todo "+PRIORITY=\"A\"" (
                                                (org-agenda-overriding-header "***** High-Priority Todos:")
                                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                                (org-agenda-sorting-strategy '(priority-down))
                             ))
                  (todo "TODO|DOING" (
                                      (org-agenda-overriding-header "***** Active Tasks:")
                                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                      (org-agenda-sorting-strategy '(priority-down))
                                      ))
                  (todo "WAITING|DELEGATED" (
                                             (org-agenda-overriding-header "***** Waiting/Delegated Tasks:")
                                             (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                             (org-agenda-sorting-strategy '(priority-down))
                                             ))
                   )) t)
#+end_src

Define the view for the work-only agenda.

#+begin_src emacs-lisp
  (add-to-list 'org-agenda-custom-commands
               '("W" "Today's Agenda - Work"
                 (
                  (agenda "" (
                              (org-agenda-span 1)
                              (org-agenda-files tlc/org-work-agenda-files)
                              (org-agenda-overriding-header "***** Today's Agenda:"))
                          )
                  (tags-todo "+PRIORITY=\"A\"" (
                                                (org-agenda-overriding-header "***** High-Priority Todos:")
                                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                                (org-agenda-files tlc/org-work-agenda-files)
                                                (org-agenda-sorting-strategy '(priority-down))
                             ))
                  (todo "TODO|DOING" (
                                      (org-agenda-overriding-header "***** Active Tasks:")
                                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                      (org-agenda-files tlc/org-work-agenda-files)
                                      (org-agenda-sorting-strategy '(priority-down))
                                      ))
                  (todo "WAITING|DELEGATED" (
                                             (org-agenda-overriding-header "***** Waiting/Delegated Tasks:")
                                             (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                             (org-agenda-files tlc/org-work-agenda-files)
                                             (org-agenda-sorting-strategy '(priority-down))
                                             ))
                   )) t)
#+end_src

Define the view for the personal-only agenda.

#+begin_src emacs-lisp
  (add-to-list 'org-agenda-custom-commands
          '("P" "Today's Agenda - Personal"
                 (
                  (agenda "" (
                              (org-agenda-span 1)
                              (org-agenda-files tlc/org-personal-agenda-files)
                              (org-agenda-overriding-header "***** Today's Agenda:"))
                          )
                  (tags-todo "+PRIORITY=\"A\"" (
                                                (org-agenda-overriding-header "***** High-Priority Todos:")
                                                (org-agenda-files tlc/org-personal-agenda-files)
                                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                                (org-agenda-sorting-strategy '(priority-down))
                             ))
                  (todo "TODO|DOING" (
                                      (org-agenda-overriding-header "***** Active Tasks:")
                                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                      (org-agenda-files tlc/org-personal-agenda-files)
                                      (org-agenda-sorting-strategy '(priority-down))
                                      ))
                  (todo "WAITING|DELEGATED" (
                                             (org-agenda-overriding-header "***** Waiting/Delegated Tasks:")
                                             (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                                             (org-agenda-files tlc/org-personal-agenda-files)
                                             (org-agenda-sorting-strategy '(priority-down))
                                             ))
                   )) t)
#+end_src

Define a view for upcoming deadlines.

#+begin_src emacs-lisp
  (add-to-list 'org-agenda-custom-commands
               '("d" "Upcoming deadlines" agenda ""
                 ((org-agenda-entry-types '(:deadline))
                  (org-agenda-span 1)
                  (org-deadline-warning-days 21)
                  (org-agenda-time-grid nil))
                 ) t)
#+end_src

Define custom queries which search subsets of files.

#+begin_src emacs-lisp :tangle no
  (add-to-list 'org-agenda-custom-commands
             '(("Q" "Custom Queries")
               ("Qa" "Archive search" search ""
                (org-agenda-files (file-expand-wildcards (concat org-directory "/archive/*.org"))))
               ("Ql" "Lists search" search ""
                (org-agenda-files (file-expand-wildcards (concat org-directory "/list_*.org"))))
               ("Qp" "Projects search" search ""
                (org-agenda-files (file-expand-wildcards (concat org-directory "/proj_*.org"))))
               ("Qw" "Writing search" search ""
                (org-agenda-files (file-expand-wildcards (concat org-directory "/writing_*.org"))))
               ("Qr" "Refile search" search ""
                (org-agenda-files (file-expand-wildcards (concat org-directory "/refile*.org")))))
               t)
#+end_src

***** Logging Settings

#+begin_src emacs-lisp
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-log-state-notes-insert-after-drawers nil)
  (setq org-log-state-notes-into-drawer t)
  (setq org-log-states-order nil)
  (setq org-log-reschedule 'time)
  (setq org-log-redeadline 'time)
  (setq org-log-repeat t)
#+end_src

***** Tagging and Keyword Settings

Simplify tag selection.

#+begin_src emacs-lisp
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-fast-tag-selection-single-key (quote expert))
#+end_src

Define the default set of tags.

#+begin_src emacs-lisp
  (setq org-tag-alist
        (quote (
                (:startgroup)
                ("PROJECT" . ?p) ("WORK" . ?w) ("LEARNING" . ?l) ("PERSONAL" . ?p)
                (:endgroup)
                ("FLAGGED" . ?f)
                (:startgroup)
                ("DELEGATED" . ?d) ("WAITING" . ?w) ("CANCELED" . ?c)
                (:endgroup)
                (:startgroup)
                ("MEETING" . ?m) ("ONEONONE" . ?o) ("NOTE" . ?n) ("JOURNAL" . ?j) ("IDEA" . ?i)
                (:endgroup)
                )))
#+end_src

Define font faces for tags.

#+begin_src emacs-lisp
  (setq org-tag-faces
        (quote
         (
          ("PROJECT"    :foreground "forest green"        :weight bold :slant normal  :underline nil)
          ("LEARNING"   :foreground "medium spring green" :weight bold :slant normal  :underline nil)
          ("PERSONAL"   :foreground "medium slate blue"   :weight bold :slant normal  :underline nil)
          ("FLAGGED"    :foreground "deep pink"           :weight bold :slant oblique :underline t)
          ("CANCELED"   :foreground "IndianRed3"          :weight bold :slant normal  :underline nil)
          ("DELEGATED"  :foreground "sienna1"             :weight bold :slant normal  :underline nil)
          ("WAITING"    :foreground "sienna1"             :weight bold :slant normal  :underline nil)
          ("MEETING"    :foreground "LightPink3"          :weight bold :slant normal  :underline nil)
          ("NOTE"       :foreground "orchid3"             :weight bold :slant normal  :underline nil)
          ("JOURNAL"    :foreground "orchid3"             :weight bold :slant normal  :underline nil)
          ("ONEONONE"   :foreground "orchid3"             :weight bold :slant normal  :underline t)
          ("IDEA"       :foreground "orchid3"             :weight bold :slant normal  :underline nil)
          )))
#+end_src

Define the default set of TODO states.

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '(
           (sequence "TODO(t)" "NEXT(n)" "DOING(d)" "WAITING(w@/!)" "DELEGATED(l@/!)" "|" "DONE(x!)" "CANCELLED(c@/!)" "FORWARD(f)")
          ))
#+end_src

Define font faces for todo keyword states.

#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        (quote 
         (
          ;; Colors for the standard TODOs sequence
          ("TODO"       :foreground "red"
           :background "#1E1C31"
           :weight bold :slant normal  :underline nil :overline nil)
          ("NEXT"       :foreground "cyan"
           :background "#1E1C31"
           :weight bold :slant normal  :underline nil :overline nil)
          ("DOING"      :foreground "forest green"
           :background "#1E1C31"
           :weight bold :slant normal  :underline t   :overline nil)
          ("WAITING"    :foreground "orange"
           :background "#1E1C31"
           :weight bold :slant oblique :underline nil :overline nil)
          ("DELEGATED"  :foreground "orange"
           :background "#1E1C31"
           :weight bold :slant oblique :underline nil :overline nil)
          ("DONE"       :foreground "dark slate gray"
           :background "#1E1C31"
           :weight bold :slant normal  :underline nil :overline nil)
          ("CANCELLED"   :foreground "forest green"
           :background "#1E1C31"
           :weight bold :slant normal  :underline nil :overline nil)
          ("FORWARD"    :foreground "dim gray"
           :background "#1E1C31"
           :weight bold :slant normal  :underline nil :overline nil)
          )))
#+end_src

***** Org Source Color Theme

Change the coloring of org code blocks.

#+begin_src emacs-lisp :tangle no
  (defface org-block-begin-line
    '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
    "Face used for the line delimiting the begin of source blocks."
    :group 'org-codeblock)

  (defface org-block-background
    '((t (:background "#FFFFEA")))
    "Face used for the source block background."
    :group 'org-codeblock)

  (defface org-block-end-line
    '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
    "Face used for the line delimiting the end of source blocks."
    :group 'org-codeblock)
#+end_src

***** Org Property Settings

Enable property inheritance.

#+begin_src emacs-lisp
  (setq org-use-property-inheritance t)
#+end_src

***** Org Capture Settings

******* Create a new window for capture buffers

From [[https://stackoverflow.com/questions/21195327/emacs-force-org-mode-capture-buffer-to-open-in-a-new-window][here]].

Helper functions.

#+begin_src emacs-lisp :tangle no
  (defun aharris/get-frame-by-name (fname)
    "If there is a frame with named FNAME, return it, else nil."
    (require 'dash)                       ; For `-some'
    (-some (lambda (frame)
             (when (equal fname (frame-parameter frame 'name))
               frame))
           (frame-list)))

  (defun aharris/display-buffer-in-named-frame (buffer alist)
    "Display BUFFER in frame with specific name.
  The name to use is the value associated with the 'named-frame key
  in ALIST.  If a frame with that name already exists, use it.
  Otherwise, call `display-buffer-in-pop-up-frame' to create it.

  If ALIST does not contain the key 'named-frame, use the name of BUFFER."
    (let* ((fname  (or (cdr (assq 'named-frame alist))
                       (buffer-name buffer)))
           (frame  (aharris/get-frame-by-name fname)))
      (if frame
          (window--display-buffer buffer
                                  (frame-selected-window frame)
                                  'reuse)
        (display-buffer-pop-up-frame
         buffer
         (push `(pop-up-frame-parameters (name . ,fname)) 'alist)
;         (add-to-list 'alist `(pop-up-frame-parameters
;                               (name . ,fname)))
))))
#+end_src

Define a macro to install temporary advice.

#+begin_src emacs-lisp :tangle no
  (defmacro aharris/with-advice (adlist &rest body)
    "Execute BODY with temporary advice in ADLIST.

  Each element of ADLIST should be a list of the form
    (SYMBOL WHERE FUNCTION [PROPS])
  suitable for passing to `advice-add'.  The BODY is wrapped in an
  `unwind-protect' form, so the advice will be removed even in the
  event of an error or nonlocal exit."
    (declare (debug ((&rest (&rest form)) body))
             (indent 1))
    `(progn
       ,@(mapcar (lambda (adform)
                   (cons 'advice-add adform))
                 adlist)
       (unwind-protect (progn ,@body)
         ,@(mapcar (lambda (adform)
                     `(advice-remove ,(car adform) ,(nth 2 adform)))
                   adlist))))
#+end_src

Open =org-capture= in a popout frame.

#+begin_src emacs-lisp :tangle no
  (defun aharrus/org-capture-in-popout-frame (&optional goto keys)
    "As `org-capture', but do all work in a new frame.

      This function by itself doesn't clean up the frame following
      capture.  To do that, add `aharris/org-capture-delete-capture-frame'
      to `org-capture-after-finalize-hook'."
    (interactive "P")
    (if goto
        (org-capture goto keys)
      (let ((override  '("\\*Org Select\\*\\|\\*Capture\\*\\|CAPTURE-.*"
                         aharris/display-buffer-in-named-frame
                         (named-frame . "Capture"))))

        ;; Force all relevant buffers to open in a specific capture frame.
        (push override 'display-buffer-alist)
;        (add-to-list 'display-buffer-alist override)
        (aharris/with-advice
            (;; Make Org-mode respect `display-buffer-alist'.
             (#'org-switch-to-buffer-other-window :override #'pop-to-buffer)
             ;; And stop Org-mode from messing with our window configuration.
             (#'delete-other-windows :override #'ignore))
          (unwind-protect (condition-case err
                              (org-capture goto keys)
                            (error (aharris/org-capture-delete-capture-frame)
                                   (signal (car err) (cdr err))))
            (setq display-buffer-alist
                  (delete override display-buffer-alist)))))))
#+end_src

Get rid of the popout frame when it's complete.

#+begin_src emacs-lisp :tangle no
  (defun aharris/org-capture-delete-capture-frame ()
    "Delete a frame named \"Capture\".
  For use in `org-capture-after-finalize-hook' to clean up after
  `aharris/org-capture-in-popout-frame'."
    (let ((frame  (aharris/get-frame-by-name "Capture")))
      (when frame (delete-frame frame))))
#+end_src

Enable the popouts.

#+begin_src emacs-lisp :tangle no
  (global-set-key "\C-cc" 'aharris/org-capture-in-popout-frame)
  (add-hook 'org-capture-after-finalize-hook
            #'aharris/org-capture-delete-capture-frame)
#+end_src

******* Capture Templates

Load [[https://github.com/progfolio/doct/][doct]], a helper library to declaratively set =org-capture-templates=.

#+begin_src emacs-lisp
  (require 'doct)
#+end_src

We define a list of tasks for each day of the week. These are used by
=tlc/org-today-entry= to build the list of tasks for today. We also
define helpers for accessing entries in this list.

#+begin_src emacs-lisp
    (defvar tlc/org-dow-tasks
      '((0 . nil) (1 . nil) (2 . nil) (3 . nil) (4 . nil) (5 . nil) (6 . nil))
      "A list of day-specific tasks for each day of the week. Used by the
    org-today-entry capture template.
  
    The car of each item in the list is a DOW number (as found in the 6th element of
    the list returned by parse-time-string.
  
    The cdr of these elements is a list of todo entries. These will
    be inserted into the Tasks section of the entry created by
    tlc/org-today-entry. You can set those manually or using the
    shortcut helper function tlc/set-org-dow-tasks.")
  
    (defun tlc/set-org-dow-tasks (dow tasklist)
      "Helper to set tlc/org-dow-tasks. See the documentation for
    tlc/org-dow-tasks for details."
      (if (and (>= dow 0) (<= dow 6))
          (setcdr (assq dow tlc/org-dow-tasks) tasklist)
        (message "tlc/set-org-dow-tasks: dow must be between 0 and 6")))
  
  (defun tlc/org-today-entry-daily-tasks nil
    (interactive)
    (string-join
     (cdr (assoc (nth 6 (parse-time-string (current-time-string))) tlc/org-dow-tasks))
     "\n******* TODO"))
  #+end_src

Define our templates for =org-capture=. There are lots of them.

#+begin_src emacs-lisp
  ;  (use-package org-chef :ensure t)
  
    ;; (defun tlc/maybe-wrap-quotes (content &optional wrap-type)
    ;;   "Wrap quoted text if provided."
    ;;   (if content
    ;;     (if (length (string-trim content))
    ;;       (concat "#+begin_"
    ;;               (downcase (or wrap-type "quote"))
    ;;               "\n"
    ;;               content 1
    ;;               "\n"
    ;;               "#+end_"
    ;;               (downcase (or wrap-type "quote")))
    ;;       ""
    ;;       )))
    (setq org-capture-templates
          (doct '(
                  ("Tasks"
                   :keys "t"
                   :file "work.org" :olp ("Inbox")
                   :type entry :prepend t
                   :empty-lines 0
                   :children (
                              ("Respond"
                               :keys "r" :empty-lines 0
                               :template "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n")
                              ("Meeting with %?"
                               :keys "m"
                               :type entry  :olp ("Journal") :empty-lines 0
                               :datetree t :time-prompt t :tree-type week :prepend t
                               :template "* Meeting with %? :MEETING:\n%U")
                              ("Meeting: %?"
                               :keys "M"
                               :type entry  :olp ("Journal") :empty-lines 0
                               :datetree t :time-prompt t :tree-type week :prepend t
                               :template "* %<%Y-%m-%d> - %? :MEETING:\n%U")
                              ("Call"
                               :keys "c"
                               :type entry  :olp ("Journal") :empty-lines 0
                               :datetree t :time-prompt t :tree-type week :prepend t
                               :template "* Phone Call with %?\n%U")
                              ("Note"
                               :keys "n"
                               :type entry :olp ("Journal") :empty-lines 0
                               :datetree t :time-prompt t :tree-type week :prepend t
                               :template "* %? :NOTE:\n%U"
                              )
                              ("Journal"
                               :keys "j"
                               :type entry  :olp ("Journal") :empty-lines 0
                               :datetree t :time-prompt t :tree-type week :prepend t
                               :template  "* %? :JOURNAL:\n%U"
                             )
                             ("Idea"
                               :keys "i"
                               :file "journal.org"
                               :datetree t :time-prompt t :tree-type week :prepend t
                               :empty-lines 0
                               :template  "* %? :JOURNAL:\n%U"
                             )
                   ))
  
                  ("Writing Journal" :type entry
                   :keys "w" :time-prompt t :tree-type week :prepend t :olp ("Journal")
                   :template "* %<%Y-%m-%d>\n    %?"
                   :empty-lines 0
                   :children
                   (
                    ("AZ Mystery 1" :keys "a" :file "writing/az_mystery_1/az_mystery_1.org")
                    ("Transformation 2ed" :keys "t" :file "writing/transformation_2e/transformation_2e.org")
                    ("Short Stories" :keys "s" :file "writing_short_stories.org")
                    ))
  
                  ("One-on-One Meeting"
                   :keys "o"
                   :file "work.org" :type entry :olp ("One-on-Ones")
                   :datetree t :tree-type week :prepend t :time-prompt t 
                   :empty-lines 0
                   :template (
                              "* One on One - %^{WHO|Saima|Dena|Kevin|Rachel} - %<%Y-%m-%d> :ONEONONE:))"
                              "*** My Agenda Items [/]"
                              "    - [ ] %?"
                              "*** Notes"
                              "    - %U"
                              "*** Next Actions"
                              "***** TODO Schedule next 1:1"
                              "      SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))" 
                              ))
  
                  ("Link" :keys "l" :file "codex.org" 
                   :template "* %?\n%U\n" :empty-lines 0)
  
                  ("To Buy" :keys "B" :file "personal.org" :headline "To Buy"
                   :template "* TODO Buy %c\n%U\n" :empty-lines 0)
  
                  ("Errand" :keys "E" :file "personal.org" :headline "Errands"
                   :template "* TODO%c\n%U\n" :empty-lines 0)
  
                  ("Someday" :keys "S" :file "someday.org" :headline "Inbox"
                   :template "* TODO%c\n%U\n" :empty-lines 0)
  
                ("Cookbook"
                    :keys "c" :file "recipes.org" :type entry
                    :template "%(org-chef-get-recipe-from-url)"
                    :empty-lines 1)
                ("Cookbook (manual)"
                    :keys "C" :file "recipes.org" :type entry :empty-lines 0
                    :template
                    (
                        "* %^{Recipe title: }"
                        ":PROPERTIES:"
                        ":source-url:"
                        ":servings:"
                        ":prep-time:"
                        ":cook-time:"
                        ":ready-in:"
                        ":END:"
                        "*** Ingredients"
                        "   %?"
                        "*** Directions"
                        ""
                        ""
                    )
                  )
  
                  ("Protocol" :keys "p" :file "codex.org" :empty-lines 0
                   :template ("* [[%:link][%:description]]"
                              ""
                              "Captured at: %U"
                              ""
                              "#+begin_quote"
                              "%i"
                              "#+end_quote"
                              ;;"%(tlc/maybe-wrap-quotes \"%i\")"
                              ))
  
                  ("Protocol Link" :keys "L" :file "codex.org" :empty-lines 0
                   :template ("* %? [[%:link][%:description]]"
                              ""
                              "Captured at: %U"))
  
                  ("Habit" :empty-lines 0
                   :keys "h" :file "master.org" :headline "Habits"
                   :template (
                              "* NEXT %?"
                              "  SCHEDULED: <%<%Y-%m-%d %a .+1d>>"
                              "  :PROPERTIES:"
                              "  :CREATED: %U"
                              "  :STYLE: habit"
                              "  :REPEAT_TO_STATE: NEXT"
                              "  :LOGGING: DONE(!)"
                              "  :END:"
                              "  %U"
                              )
                   )
                  )))
#+end_src

******* Align tags after capturing

Automatically re-align tags after capturing.

#+begin_src emacs-lisp
  (add-hook 'org-capture-mode-hook '(lambda nil (org-align-tags t)))
  (add-hook 'org-after-tags-change-hook '(lambda nil (org-align-tags t)))
#+end_src

******* org-protocol-capture-html

Load up [[https://github.com/alphapapa/org-protocol-capture-html][org-protocol-capture-html]], which can capture a whole Web page to
org-mode. Requires the [[https://github.com/magnars/s.el][s.el]] library and [[https://pandoc.org/][pandoc]].

#+begin_src emacs-lisp :tangle no
  (require 'org-protocol-capture-html)

  (add-to-list 'org-capture-templates '("w" "Web site" entry
                                         (file "")
                                         "* %a :website:\n\n%U %?\n\n%:initial") t)
#+end_src

***** Refile Settings
This is a helper function to refile into a datetree. It comes from
[[https://github.com/alphapapa/unpackaged.el][here]].

#+begin_src emacs-lisp
  (cl-defun unpackaged/org-refile-to-datetree (file &key (date (calendar-current-date)) entry)
    "Refile ENTRY or current node to entry for DATE in datetree in FILE."
    (interactive (list (read-file-name "File: " (concat org-directory "/") nil 'mustmatch nil
                                       (lambda (filename)
                                         (string-suffix-p ".org" filename)))))
    ;; If org-datetree isn't loaded, it will cut the tree but not file
    ;; it anywhere, losing data. I don't know why
    ;; org-datetree-file-entry-under is in a separate package, not
    ;; loaded with the rest of org-mode.
    (require 'org-datetree)
    (unless entry
      (org-cut-subtree))
    ;; Using a condition-case to be extra careful. In case the refile
    ;; fails in any way, put cut subtree back.
    (condition-case err
        (with-current-buffer (or (org-find-base-buffer-visiting file)
                                 (find-file-noselect file))
          (org-datetree-file-entry-under (or entry (car kill-ring)) date)
          (save-buffer))
      (error (unless entry
               (org-paste-subtree))
             (message "Unable to refile! %s" err))))
#+end_src

Define valid refile targets.

#+begin_src emacs-lisp
  (setq org-refile-targets '(
                             (nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 5)
                             ("someday.org" :maxlevel . 5)
                             ("codex.org" :maxlevel . 3)
                             ))
#+end_src

Settings for the =org-refile= functions.

#+begin_src emacs-lisp
  (setq org-outline-path-complete-in-steps t)
  (setq org-refile-use-outline-path t)
  (setq org-capture-bookmark nil)
  (setq org-reverse-note-order t)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-cache t)
#+end_src

***** Journal Entries

Decide where the org journal file lives.

#+begin_src emacs-lisp
  (defvar org-journal-file (concat org-directory "/journal.org") "Path to OrgMode journal file.")
#+end_src

Set the date format for journal entries.

#+begin_src emacs-lisp
  (defvar org-journal-date-format "%Y-%m-%d" "Date format string for journal headings.")
#+end_src

***** Timeclock settings

Enable clocking in and out. Clock events are saved to the LOGBOOK
drawer.

#+begin_src emacs-lisp :tangle no
  (org-clock-persistence-insinuate)

  (setq org-clock-history-length 23)
  (setq org-clock-in-resume t)
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  (setq org-clock-idle-time 15)
  (setq org-clock-into-drawer t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-out-when-done t)
  (setq org-clock-persist t)
  (setq org-clock-persist-query-resume nil)
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  (setq org-clock-report-include-clocking-task t)
#+end_src

Remove empty LOGBOOK drawers on clock-out.

#+begin_src emacs-lisp :tangle no
  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at "LOGBOOK" (point))))
  (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+end_src

***** Org Todo Dependencies
#+begin_src emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-track-ordered-property-with-tag t)
(setq org-agenda-dim-blocked-tasks t)
#+end_src

Mark TODO entries DONE when all subentries are done. From [[https://orgmode.org/manual/Breaking-Down-Tasks.html][here]].

#+begin_src emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src

***** Org Structure and Formatting

Define structure templates.

#+begin_src emacs-lisp
  (setq org-structure-template-alist 
        '(
          ("c" . "center")
          ("C" . "comment")
          ("e" . "example")
          ("E" . "export")
          ("s" . "src")
          ("v" . "verse")))
#+end_src

Define emphasis pairs.

#+begin_src emacs-lisp
  (setq org-emphasis-alist 
        (quote (("*" bold "<b>" "</b>")
                ("/" italic "<i>" "</i>")
                ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                ("=" org-code "<code>" "</code>" verbatim)
                ("~" org-verbatim "<code>" "</code>" verbatim))))
#+end_src

Disable superscripts and subscripts.

#+begin_src emacs-lisp
  (setq org-use-sub-superscripts nil)
#+end_src

***** Org custom enter key behavior

This function supplies more context-aware enter key behavior in
outlines. It can be disabled by setting =tlc/enable-org-custom-return=
to =nil=.

#+begin_src emacs-lisp
    (defun unpackaged/org-element-descendant-of (type element)
      "Return non-nil if ELEMENT is a descendant of TYPE.
    TYPE should be an element type, like `item' or `paragraph'.
    ELEMENT should be a list like that returned by `org-element-context'."
      ;; MAYBE: Use `org-element-lineage'.
      (when-let* ((parent (org-element-property :parent element)))
        (or (eq type (car parent))
            (unpackaged/org-element-descendant-of type parent))))
    
    (defvar tlc/enable-org-custom-return nil
      "Set to true to enable scimax/org-return functionality")
    
    (defun unpackaged/org-return-dwim (&optional default)
      "A helpful replacement for `org-return'.  With prefix, call `org-return'.
    
    On headings, move point to position after entry content.  In
    lists, insert a new item or end the list, with checkbox if
    appropriate.  In tables, insert a new row or end the table.
    
    You can disable the custom behavior globally by setting the variable
    `tlc/org-enable-custom-return` to a nil value.
    "
      (interactive "P")
      (if (or default (not tlc/enable-org-custom-return))
          (org-return)
        (cond
         ;; Act depending on context around point.
    
         ((eq 'link (car (org-element-context)))
          ;; Link: Open it.
          (org-open-at-point-global))
    
         ((org-at-heading-p)
    
          ;; Heading: Move to position after entry content.
          ;; NOTE: This is probably the most interesting feature of this function.
          (let ((heading-start (org-entry-beginning-position)))
            (goto-char (org-entry-end-position))
            (cond ((and (org-at-heading-p)
                        (= heading-start (org-entry-beginning-position)))
                   ;; Entry ends on its heading; add newline after
                   (end-of-line)
                   (insert "\n\n"))
                  (t
                   ;; Entry ends after its heading; back up
                   (forward-line -1)
                   (end-of-line)
                   (when (org-at-heading-p)
                     ;; At the same heading
                     (forward-line)
                     (insert "\n")
                     (forward-line -1))
                   ;; FIXME: looking-back is supposed to be called with more arguments.
                   (while (not (looking-back (rx (repeat 3 (seq (optional blank) "\n")))))
                     (insert "\n"))
                   (forward-line -1)))))
    
         ((org-at-item-checkbox-p)
          ;; Checkbox: Insert new item with checkbox.
          (org-insert-todo-heading nil))
    
         ((org-in-item-p)
          ;; Plain list.  Yes, this gets a little complicated...
          (let ((context (org-element-context)))
            (if (or (eq 'plain-list (car context))  ; First item in list
                    (and (eq 'item (car context))
                         (not (eq (org-element-property :contents-begin context)
                                  (org-element-property :contents-end context))))
                    (unpackaged/org-element-descendant-of 'item context))  ; Element in list item, e.g. a link
                ;; Non-empty item: Add new item.
                (org-insert-item)
              ;; Empty item: Close the list.
              ;; TODO: Do this with org functions rather than operating on the text. Can't seem to find the right function.
              (delete-region (line-beginning-position) (line-end-position))
              (insert "\n"))))
    
         ((when (fboundp 'org-inlinetask-in-task-p)
            (org-inlinetask-in-task-p))
          ;; Inline task: Don't insert a new heading.
          (org-return))
    
         ((org-at-table-p)
          (cond ((save-excursion
                   (beginning-of-line)
                   ;; See `org-table-next-field'.
                   (cl-loop with end = (line-end-position)
                            for cell = (org-element-table-cell-parser)
                            always (equal (org-element-property :contents-begin cell)
                                          (org-element-property :contents-end cell))
                            while (re-search-forward "|" end t)))
                 ;; Empty row: end the table.
                 (delete-region (line-beginning-position) (line-end-position))
                 (org-return))
                (t
                 ;; Non-empty row: call `org-return'.
                 (org-return))))
         (t
          ;; All other cases: call `org-return'.
          (org-return)))))
    
    (require 'org-inlinetask)
    
    (setq tlc/enable-org-custom-return nil)
    (if tlc/enable-org-custom-return
        (define-key org-mode-map (kbd "RET") 'unpackaged/org-return-dwim))
#+end_src

***** Org-Babel Settings

Enable syntax highlight in source code blocks.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Don't prompt before running code in org.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Edit code blocks in the current window.

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Indent should behave natively in =emacs-lisp= source code blocks. From [[https://stackoverflow.com/questions/15773354/indent-code-in-org-babel-src-blocks][here]].

#+begin_src emacs-lisp
  (defvar tlc/org-babel-native-indent-languages
    '(
      "emacs-lisp" 
      "python")
    "The list of languages for which to enable native indent behavior in code blocks.")
  
  (defun indent-org-src-block-line ()
    "Indent the current line of emacs lisp code."
    (interactive)
    (let ((info (org-babel-get-src-block-info 'light)))
      (when info
        (let ((lang (nth 0 info)))
          (when (member lang tlc/org-babel-native-indent-languages) 
            (let ((indent-line-function 'lisp-indent-line))
              (indent-for-tab-command)))))))
  
  (add-to-list 'org-tab-before-tab-emulation-hook
               'indent-org-src-block-line)
#+end_src


Fix an incompatibility between the =ob-async= and =ob-ipython= packages

#+begin_src emacs-lisp
  (setq ob-async-no-async-languages-alist 
        '(
          "ipython"
          ))
#+end_src

***** Org File Skeletons

[[https://www.emacswiki.org/emacs/SkeletonMode][Skeleton mode]] is a mechanism for defining file templates in Emacs.

Define a simple helper function for project tags.

  #+begin_src emacs-lisp
  (defun tlc/format-tag-list (tag-list)
     "Format a list of tags, by removing spaces and tabs and replacing commas and semicolons with colons."
     (upcase (replace-regexp-in-string "[\s\t,;]+" ":" tag-list)))
  #+end_src

Define a skeleton for an Org file header.
  
  #+begin_src emacs-lisp
    (define-skeleton tlc/org-file-header-skeleton
      "Insert the header into aan org-mode file."
      "# -*- mode: org; coding: utf-8; -*-\n"
      "#+TITLE: " (skeleton-read "Title: ") "\n"
      "#+DATE: Time-stamp: <>\n"
      "#+FILETAGS: :" (tlc/format-tag-list (skeleton-read "File tags: ")) ":\n"
      "#+CATEGORY: " (tlc/format-tag-list (skeleton-read "File categories: " "ORGANIZTION")) ":\n"
      "#+SETUPFILE: ~/org-life/_setup.org\n"
      "#+SETUPFILE: ~/org-life/_themes/org/theme-readtheorg-local.setup\n"
      )
#+end_src

Define a skeleton for an Org project file.

#+begin_src emacs-lisp
   (define-skeleton tlc/org-project-skeleton
     "Create a skeleton for an org project file."
     "# -*- mode: org; coding: utf-8; -*-\n"
     "#+TITLE: Projects - " (skeleton-read "Project Name: ") "\n"
     "#+DATE: Time-stamp: <>\n"
     "#+TAGS: INITIATION(i) PLANNING(p) EXECUTION(e) MONITORING(m) CLOSURE(c)\n"
     "#+TAGS: MEETING(M) DEADLINE(D) DELIVERABLE(E) KPI(K) RESULT(R)\n"
     "#+FILETAGS: :PROJECT:" (tlc/format-tag-list (skeleton-read "File tags: "))  ":\n"
     "#+CATEGORY: " (tlc/format-tag-list (skeleton-read "File categories: " "PROJECT")) ":\n"
     "#+SETUPFILE: ~/org-life/_setup.org\n"
     "#+SETUPFILE: ~/org-life/_themes/org/theme-readtheorg-local.setup\n"
     "\n"
     "* Inbox\n"
     "* Project Planning\n"
     "*** Initiation :INITIATION:\n"
     "****** Project Charter\n"
     "****** Stakeholders\n"
     "*** Planning :PLANNING:\n"
     "***** Goals\n"
     "***** Scope Statement\n"
     "***** Milestones\n"
     "***** Communication Plan\n"
     "***** Risks\n"
     "*** Execution :EXECUTION:\n"
     "***** Project Meetings\n"
     "*** Monitoring & Control :MONITORING:\n"
     "***** Status Reports\n"
     "*** Closure :CLOSURE:\n"
     "***** Post Mortem\n"
     "***** Punch List\n"
     "***** Final Report\n"
     "* Project Plan                                          :taskjuggler_project:\n"
     "  :PROPERTIES:\n"
     "  :outputdir: \".\/\"\n"
     "  :EXPORT_TITLE: project-name\n"
     "  :ID: project_id\n"
     "  :VERSION:  1\n"
     "  :timezone: \"America/Phoenix\"\n"
     "  :END:\n"
     "  #+PROPERTY: Effort_ALL 1h 1d 2d 3d 5d 10d 15d 20d 25d 30d 45d\n"
     "  #+PROPERTY: Resource_ALL tammy\n"
     "  #+COLUMNS: %30ITEM(Task) %Effort %start %depends %ORDERED %BLOCKER %allocate\n"
     "  #+NAME: project_plan\n"
     "* Resources                                            :taskjuggler_resource:\n"
     "  :PROPERTIES:"
     "  :STARTUP:  folded"
     "  :END:"
     "* Reports                                              :taskjuggler_reports:\n"
     )
#+end_src


  Define a skeleton for a writing project.

  #+begin_src emacs-lisp
    (define-skeleton tlc/org-writing-skeleton
      "Create a skeleton for writing/publishing files."
      "#+TITLE: " (skeleton-read "Title: ") "\n"
      "#+DATE: Time-stamp: <>\n"
      "#+CREATOR: " user-full-name 
      "#+LANGUAGE: en\n"
      "#+EXCLUDE_TAGS: noexport\n"
      "#+OPTIONS: ':t *:t -:t ::t author:t creator:t date:t e:t email:t f:t H:3\n"
      "#+OPTIONS: title:t |:t toc:nil\n"
      "#+TAGS: noexport(n) draft(d) revise(r) complete(c)\n"
      "#+FILETAGS: :WRITING:MANUSCRIPT" (tlc/format-tag-list (skeleton-read "File tags: "))  ":\n"
      "#+CATEGORY: " (tlc/format-tag-list (skeleton-read "File categories: " "WRITING")) ":\n"
      "#+SETUPFILE: ~/org-life/_setup.org\n"
      "#+SETUPFILE: ~/org-life/_themes/org/theme-readtheorg-local.setup\n"
      "\n"
      "* Characters                                                       :noexport:\n"
      "* Settings                                                         :noexport:\n"
      "* Research                                                         :noexport:\n"
      "* Journal                                                          :noexport:\n"
      "* Dedication                                                    :frontmatter:\n"
      "* Acknowledgements                                              :frontmatter:\n"
      "* Prologue                                                       :mainmatter:\n"
      "* Chapter 1                                                      :mainmatter:\n"
      "* Endmatter                                                       :endmatter:\n"
      "* Unfiled Scenes                                                   :noexport:\n")
#+end_src

Define a skeleton for org income/expense worksheets.

#+begin_src emacs-lisp
  ;; (define-skeleton tlc/org-finance-skeleton
  ;;   (let ((skeleton-month (skeleton-read "Month (0-12): "))
  ;;         (skeleton-year (skeleton-read  "Year: ")))
  ;;     "***** Income\n"
  ;;     "\n"
  ;;     "#+name income-" skeleton-year "-" skeleton-month "\n"
  ;;     "| ! | Date         | PaycheckAmount |\n"
  ;;     "|---+--------------+----------------|\n"
  ;;     "|   |              |                |\n"
  ;;     "|   |              |                |\n"
  ;;     "|---+--------------+----------------|\n"
  ;;     "|   | Total Income |                |\n"
  ;;     "#+TBLFM: @>$3=vsum(@I..@II)\n"
  ;;     "\n"
  ;;     " ***** Expenses\n"
  ;;     "\n"
  ;;     "#+name expenses-" skeleton-year "-" skeleton-month "\n"
  ;;     "|   | Expense                      | Monthly Total | PaycheckA | PaycheckB | PaycheckC |  Total | Balance |"
  ;;     "|   |                              |               |           |           |           |        |         |"
  ;;     "|---+------------------------------+---------------+-----------+-----------+-----------+--------+---------|"
  ;;     "| # | Credit Card - Freedom (21)   |               |           |           |           |        |      0. |"
  ;;     "| # | Credit Card - REI     (10)   |               |           |           |           |        |      0. |"
  ;;     "| # | Credit Card - United  (8)    |               |           |           |           |        |      0. |"
  ;;     "| # | Credit Card - AT&T    (20)   |               |           |           |           |        |      0. |"
  ;;     "| # | Credit Card - Kohl's  (5)    |               |           |           |           |        |      0. |"
  ;;     "| # | Dr. Flaton                   |               |           |           |           |        |      0. |"
  ;;     "| # | GEICO - Insurance (5)        |               |           |           |           |        |      0. |"
  ;;     "| # | Tucson J                     |               |           |           |           |        |      0. |"
  ;;     "| # | Lemonade - Renters Insurance |               |           |           |           |        |      0. |"
  ;;     "| # | Jim Waslo - Rent             |               |           |           |           |        |      0. |"
  ;;     "| # | CareCredit                   |               |           |           |           |        |      0. |"
  ;;     "| # | Toyota Financial Services    |               |           |           |           |        |      0. |"
  ;;     "| # | Verizon Wireless             |               |           |           |           |        |      0. |"
  ;;     "| # | Internal Revenue Service     |               |           |           |           |        |      0. |"
  ;;     "| # | Cox Communications           |               |           |           |           |        |      0. |"
  ;;     "|---+------------------------------+---------------+-----------+-----------+-----------+--------+---------|"
  ;;     "|   | Totals                       |               |           |           |           |        |         |"
  ;;     "#+TBLFM: $7=$4+$5+$6::$8=$3-$7::@>$3=vsum(@I..@II)::@>$4=vsum(@I..@II)::@>$5=vsum(@I..@II)::@>$6=vsum(@I..@II)::@>$7=vsum(@I..@II)::@>$8=vsum(@I..@II)\n"))
#+end_src

Set key bindings for the org file skeletons.

#+begin_src emacs-lisp
  (define-key org-mode-map "\C-c0"
                           (lambda nil
                             (interactive)
                             (tlc/org-project-skeleton)
                             (org-align-tags t)))
  (define-key org-mode-map "\C-c9"
                           (lambda nil
                             (interactive)
                             (tlc/org-file-header-skeleton)
                             (org-align-tags t)))
  (define-key org-mode-map "\C-c8"
                           (lambda nil
                             (interactive)
                             (tlc/org-writing-skeleton)
                             (org-align-tags t)))
#+end_src

Define helpers for jumping beteen skeleton markers. Markere are
defined by including =@= characters in the skeletons.

This came from [[https://www.emacswiki.org/emacs/SkeletonMode][here]].

#+begin_src emacs-lisp
  (defvar *skeleton-markers* nil "Markers for locations saved in skeleton-positions")

  (add-hook 'skeleton-end-hook 'skeleton-make-markers)

  (defun skeleton-make-markers ()
    (while *skeleton-markers*
      (set-marker (pop *skeleton-markers*) nil))
    (setq *skeleton-markers*
          (mapcar 'copy-marker (reverse skeleton-positions))))

  (defun skeleton-next-position (&optional reverse)
    "Jump to next position in skeleton.
           REVERSE - Jump to previous position in skeleton"
    (interactive "P")
    (let* ((positions (mapcar 'marker-position *skeleton-markers*))
           (positions (if reverse (reverse positions) positions))
           (comp (if reverse '> '<))
           pos)
      (when positions
        (if (catch 'break
              (while (setq pos (pop positions))
                (when (funcall comp (point) pos)
                  (throw 'break t))))
            (goto-char pos)
          (goto-char (marker-position
                      (car *skeleton-markers*)))))))

  (global-set-key (kbd "\C-c <prior>") (lambda nil (interactive) (skeleton-next-position t)))
  (global-set-key (kbd "\C-c <next>")  (lambda nil (interactive) (skeleton-next-position nil)))
#+end_src

***** Project Functions

From https://karl-voit.at/2019/11/03/org-projects/.

#+begin_src emacs-lisp
  (defun tlc/mark-as-project ()
  "This function makes sure that the current heading has

  (1) the tag :project:
  (2) has property COOKIE_DATA set to \"todo recursive\"
  (3) has any TODO keyword and
  (4) a leading progress indicator"
      (interactive)
      (org-toggle-tag "project" 'on)
      (org-set-property "COOKIE_DATA" "todo recursive")
      (org-back-to-heading t)
      (let* ((title (nth 4 (org-heading-components)))
             (keyword (nth 2 (org-heading-components))))
         (when (and (bound-and-true-p keyword) (string-prefix-p "[" title))
             (message "TODO keyword and progress indicator found")
             )
         (when (and (not (bound-and-true-p keyword)) (string-prefix-p "[" title))
             (message "no TODO keyword but progress indicator found")
             (forward-whitespace 1)
             (insert "NEXT ")
             )
         (when (and (not (bound-and-true-p keyword)) (not (string-prefix-p "[" title)))
             (message "no TODO keyword and no progress indicator found")
             (forward-whitespace 1)
             (insert "NEXT [/] ")
             )
         (when (and (bound-and-true-p keyword) (not (string-prefix-p "[" title)))
             (message "TODO keyword but no progress indicator found")
             (forward-whitespace 2)
             (insert "[/] ")
             )
         )
  )
#+end_src

***** Todo Hooks

#+begin_src emacs-lisp :tangle no
  (defvar tlc/enable-todo-state-change-hook nil
    "Set to true to enable the TODO state change hook.")

  (defun tlc/todo-state-change-hook ()
    "Hook function that fires on todo state changes.

  Currently this hook just clocks in when a TODO changes to the \"DOING\" state,
  and clocks out when a TODO changes to the \"TODO\" or \"WAITING\" states. When
  I figure out the right incantation to make it work, it'll also remove priority
  tags when a TODO is marked as DONE or CANCELED."
    (if tlc/enable-todo-state-change-hook
        (progn
          (cond
           ((string-equal org-state "DOING")
            (progn
              (org-clock-in)))
           ((member org-state '("TODO" "WAITING"))
            (progn
              (org-clock-out t)))))))
  (add-hook 'org-after-todo-state-change-hook 'tlc/todo-state-change-hook)
#+end_src

***** Git Integration

#+begin_src emacs-lisp
  (defun tlc/commit-org-to-git (&optional dont-push)
    "Snapshot commit the org directory to git."
      (interactive "P")
      (let ((orig-directory (pwd))
            (date-string (format-time-string "%Y-%m-%d %H:%M:%S")))
        (cd (expand-file-name org-directory))
        (shell-command (concat "git add " (expand-file-name org-directory)))
        (shell-command (concat
                        "git commit "
                        "-a "
                        "-m "
                        (shell-quote-argument (concat "Snapshot Commit at "
                                                      date-string
                                                      " from tlc/commit-org-to-git"))))
        (unless dont-push
          (shell-command "git push"))

        (if (file-directory-p orig-directory)
            (cd orig-directory))))

  (define-key org-mode-map "\C-cg" 'tlc/commit-org-to-git)
#+end_src

***** Formula helpers for org tables

#+begin_src emacs-lisp
  (defun tlc/rangeck (value min max &optional suppress-normal)
    "A helper function for Org tables to check if numbers are in a range."
    (cond
     ((and (eq min 0) (eq max 0)) "")
     ((and (eq min nil) (eq max nil)) "")
     ((or (eq value "") (eq value nil) (eq value 0)) "---")
     ((< value min) "** low")
     ((> value max) "high **")
     (t (if suppress-normal "" "normal"))))
#+end_src

#+begin_src emacs-lisp
(defun tlc/labtest-exceptions (col-number)
  "Filters an org-mode lab results table for abnormal results."
  (cl-loop
   for row in tbl
   if (or (string-equal (nth col-number row) "high **") (string-equal (nth col-number row) "** low"))
   collect row into newtbl
   finally return (append '(hline ("" "Group" "Test" "Status" "Low" "Value" "High") hline) newtbl)))
#+end_src

***** Org Sidebar

#+begin_src emacs-lisp
#+end_src

***** Org publishing
Helper to export org subtrees to multiple files.

#+begin_src emacs-lisp
  (defun org-global-props (&optional property buffer)
    "Get the plists of global org properties of current buffer."
    (unless property (setq property "PROPERTY"))
    (with-current-buffer (or buffer (current-buffer))
      (org-element-map (org-element-parse-buffer) 'keyword (lambda (el) (when (string-match property (org-element-property :key el)) el)))))

  (defun org-global-prop-value (key)
    "Get global org property KEY of current buffer."
    (org-element-property :value (car (org-global-props key))))
#+end_src

Make sure =ox-latex= is loaded.

#+begin_src emacs-lisp
  (require 'ox-latex)
  (setq org-latex-minted-options
          '(("frame" "lines") ("linenos=true")))
  
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    (add-to-list 'org-latex-minted-langs
                 '(
                   (python "py3")
                   (clojure "clojure")
                   (lisp "common-lisp")
                   (powershell "powershell")
                   (ruby "ruby")
                   (go "go")
                   (haskell "haskell")
                   (ipython "ipython")
                   (inform "inform6")
                   (javascript "javascript")
                   (less "less")
                   (objc "objective-c")
                   (ocaml "ocaml")
                   (octave "octave")
                   (perl "perl")
                   (rust "rust")
                   (sql "sql")
                   (yaml "yaml")
                   ))
  
    (setq org-latex-pdf-process
          '(
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            )))
#+end_src

Always publish org projects, even if the source files are unchanged.

#+begin_src emacs-lisp
  (setq org-publish-use-timestamps-flag nil)
#+end_src

Define custom =pub_book= and =pub_book_fmem= classes. These are used
by the [[https://github.com/tammymakesthings/latex-nonfiction-ebook-template][latex-nonfiction-ebook-template]] template to create the right
levels of hierarchy in book projects.

#+begin_src emacs-lisp
  (add-to-list 'org-latex-classes
               '(
                 "pub_book"
                 "[NO_DEFAULT_PACKAGES][NO_PACKAGES][NO_EXTRA]"
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  
  (add-to-list 'org-latex-classes
               '(
                 "pub_book_fmem"
                 "[NO_DEFAULT_PACKAGES][NO_PACKAGES][NO_EXTRA]"
                 ("\\chapter*{%s}" . "\\chapter*{%s}")
                 ("\\section*{%s}" . "\\section*{%s}")
                 ("\\subsection*{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection*{%s}" . "\\subsubsection*{%s}")))
#+end_src

Define a helper function to publish an org file to latex and then
rename it.

#+begin_src emacs-lisp
  (defun tlc/org-publish-and-rename-latex (src dst plist filename pubdir)
    (if (file-exists-p dst) (delete-file dst))
    (org-latex-publish-to-latex plist filename pubdir)
    (rename-file src dst))
#+end_src

Define a helper function to create the publishing project and necessary helpers.

#+begin_src emacs-lisp :tangle no
#+end_src

***** TaskJuggler Integration

Set up org taskjuggler integrations.

#+begin_src emacs-lisp :tangle no
  (require 'ox-taskjuggler)

  (setq org-taskjuggler-keep-project-as-task nil)
  (setq org-taskjuggler-target-version 3)
#+end_src

Set up the org-mode tags we'll use to identify our project plan sections.

#+begin_src emacs-lisp :tangle no
  (setq org-taskjuggler-project-tag "taskjuggler_project")
  (setq org-taskjuggler-resource-tag "taskjuggler_resource")
  (setq org-export-taskjuggler-report-tag "taskjuggler_report")

  (setq org-taskjuggler-default-global-properties
      (string-join
       '(
         ""
         "# Include standard shift definitions"
         "include \"shifts.tji\""
         ""
         "\n"
         ) "\n"))
#+end_src

We pull in the default reports from an include file rather than hard-coding
them.

#+begin_src emacs-lisp :tangle no
  (setq org-taskjuggler-default-reports '("include \"reports.tji\""))
#+end_src

Build a hook to allow adding content to the generated TaskJuggler file after
generation.

#+begin_src emacs-lisp :tangle no
      (defvar tlc/taskjuggler-prologue-includes nil
        "Files to include at the start of TJ files")
      (defvar tlc/taskjuggler-project-includes nil
        "Files whose contents will be inserted at the end of the project block.")
      (defvar tlc/taskjuggler-epilogue-includes nil
        "Files to include at the end of TJ files")
      (defvar tlc/taskjuggler-suppress-insertion-comments t
        "Suppress comments around blocks inserted by the export hook.")

      (setq tlc/taskjuggler-project-includes '("scenarios.tji"))
      (setq tlc/taskjuggler-epilogue-includes '("exports.tji"))

      (defun tlc/taskjuggler-export-hook--find-end-of-block (filename section)
        (progn
          (goto-char (point-min))
          (unless (looking-at (concat section " "))
                (search-forward (concat section " ") nil t))
              (if (looking-at (concat section " "))
                  (progn
                    (end-of-line)
                    (backward-char)
                    (forward-sexp)
                    (backward-char 2)
                    t)
                  nil)))

      (defun tlc/taskjuggler-export-hook--do-include (filename include-type include-list &optional insert-contents-p suppress-comments-p)
        (if include-list
            (progn
              (unless suppress-comments-p
                (insert (concat "\n# BEGIN " include-type " includes added by tlc/taskjuggler-export-hook\n")))
              (mapc (lambda (f)
                      (progn
                        (if insert-contents-p
                          (progn
                            (insert-file f)
                            (exchange-point-and-mark)
                            (insert "\n"))
                          (insert (concat "include \"" f "\"\n")))))
                    include-list)
              (unless suppress-comments-p
                (insert (concat "\n# END " include-type " includes added by tlc/taskjuggler-export-hook\n\n"))))))

      (defun tlc/taskjuggler-export-hook (filename)
        "Add necessary include files to generated taskjuggler files."
        (if (file-readable-p filename)
            (if (find-file filename)
                (progn
                  (switch-to-buffer filename)
                  (goto-char (point-min))
                  (tlc/taskjuggler-export-hook--do-include filename
                                                           "Prologue"
                                                           tlc/taskjuggler-prologue-includes
                                                           nil
                                                           tlc/taskjuggler-suppress-insertion-comments)

                  (goto-char (point-min))
                  (if (tlc/taskjuggler-export-hook--find-end-of-block filename "project")
                      (tlc/taskjuggler-export-hook--do-include filename
                                                               "Project"
                                                               tlc/taskjuggler-project-includes
                                                               t
                                                               tlc/taskjuggler-suppress-insertion-comments))

                  (goto-char (point-max))
                  (tlc/taskjuggler-export-hook--do-include filename
                                                           "Epilogue"
                                                           tlc/taskjuggler-epilogue-includes
                                                           nil
                                                           tlc/taskjuggler-suppress-insertion-comments)

                  (let
                      ((modified (buffer-modified-p)))
                        (progn
                          (if modified
                              (save-buffer))
                          (kill-buffer)
                          modified))))))

      (add-hook 'org-taskjuggler-final-hook 'tlc/taskjuggler-export-hook)
#+end_src

Add some additional attributes to the exporter.
#+begin_src emacs-lisp :tangle no
  (add-to-list 'org-taskjuggler-valid-resource-attributes 'include)
  (add-to-list 'org-taskjuggler-valid-resource-attributes 'shifts)
  (add-to-list 'org-taskjuggler-valid-task-attributes 'include)
  (add-to-list 'org-taskjuggler-valid-project-attributes 'include)
#+end_src

*** LaTeX editing

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; LaTeX Editing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

Load the AuCTeX extension.

#+begin_src emacs-lisp
(load "auctex.el" nil t t)
#+end_src

Configure AuCTeX integration.

#+begin_src emacs-lisp
  (eval-after-load "auctex"
    (progn
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (setq preview-preserve-counters t)
      (setq LaTeX-section-hook 
            '(LaTeX-section-heading
              LaTeX-section-title
              LaTeX-section-toc
              LaTeX-section-section
              LaTeX-section-label))
      (setq LaTeX-section-label '(
                                  ("part" . "part:")
                                  ("chapter" . "ch:")
                                  ("section" . "sec:")
                                  ("subsection" . "ssec:")
                                  ("subsubsection" . "sssec:")))
      (setq LaTeX-equation-label "eqn:")
      (setq LaTeX-eqnarray-label "eqns:")
      (setq LaTeX-amsmath-label "mth:")
      (setq LaTeX-figure-label "fig:")
      (setq LaTeX-table-label "tbl:")
      (setq LaTeX-syntactic-comments t)
      (add-hook 'LaTeX-mode-hook (lambda () (TeX-fold-mode 1)))
      ))
#+end_src

Turn on auto-fill for TeX and LaTeX files.
  
#+begin_src emacs-lisp
  (defun tlc/tex-mode-hook ()
    (progn
      (auto-fill-mode t)
      (setq auto-fill-function 
            (lambda () 
              (if (looking-at "\n") 
                  (do-auto-fill) 
                (LaTeX-fill-paragraph))))))
  
  
  (add-hook 'TeX-mode-hook 'tlc/tex-mode-hook)
  (add-hook 'LaTeX-mode-hook 'tlc/tex-mode-hook)
#+end_src

Add Arara as a LaTeX command.

#+begin_src emacs-lisp
  (eval-after-load "tex"
    (progn
      (add-to-list 'TeX-command-list
                   '("Arara" "arara %s" TeX-run-command t t :help "Run arara") t)
      (setq TeX-command-default "Arara")
    ))
#+end_src

Correlate TeX files and source with synctex.

#+begin_src emacs-lisp
  (setq TeX-source-correlate-method 'synctex)
#+end_src

Configure RefTeX.

#+begin_src emacs-lisp
  (require 'reftex)
  
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-default-bibliography (expand-file-name "~/texmf/bibtex/bib/tammymakesthings.bib"))
#+end_src


*** Gnu Server
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Gnu Server
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

Make sure the Gnu server is started if it's available.

#+begin_src emacs-lisp
  (if (and
       (file-directory-p (expand-file-name "~/.emacs.d/server"))
       (eq (user-uid) (nth 2 (file-attributes (expand-file-name "~/.emacs.d/server")))))
  
      (unless (and (fboundp 'server-running-p) (server-running-p))
        (server-start))
    (message "Not starting Gnu Server: ownership of %s is not you. Please fix it and try again"))
#+end_src

*** Miscellaneous Customizations

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Miscellaneous Customizations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src


***** Change all yes/no questions to y/n type

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

***** Create a New Empty Buffer

If the =*scratch*= buffer doesn't exist, it'll be created. If it does, a new
buffer of the form untitled-1, Untitled-2, etc. will be created. If the
buffer name is not =*scratch*=, you'll be offered a chance to save it.

From [[http://ergoemacs.org/emacs/emacs_new_empty_buffer.html][http://ergoemacs.org/emacs/emacs_new_empty_buffer.html]], modified by me.

#+begin_src emacs-lisp
  (defun tlc/new-empty-buffer (&optional location)
    "Create a new empty buffer.

  If the *scratch* buffer doesn't exist, it'll be created. If it does, a new
  buffer of the form untitled-1, Untitled-2, etc. will be created. If the
  buffer name is not *scratch*, you'll be offered a chance to save it.

  The optional `location` parameter determines where the new buffer will open.
  If it is set to the value 'frame, the buffer will open in a new frame. If it
  is set to the value 'window, or to another truthy value (such as via the
  prefix arg) the buffer will open in a new window. Otherwise, it'll open in
  the current window."
    (interactive "P")
    (if (get-buffer "*scratch*")
        (progn
          (let (($buf (generate-new-buffer "untitled")))
            (cond
              ((= location 'frame) (switch-to-buffer-other-frame $buf))
              ((= location 'window) (switch-to-buffer-new-window $buf))
              ((bound-and-true-p location) (switch-to-buffer-new-window $buf))
              (t (switch-to-buffer $buf)))
            (funcall initial-major-mode)
            (setq buffer-offer-save t)
            $buf))
      (progn
          (let (($buf (generate-new-buffer "*scratch*")))
            (cond
              ((= location 'frame) (switch-to-buffer-other-frame $buf))
              ((= location 'window) (switch-to-buffer-new-window $buf))
              ((bound-and-true-p location) (switch-to-buffer-new-window $buf))
              (t (switch-to-buffer $buf)))
            (funcall initial-major-mode)
            (setq buffer-offer-save nil)
            $buf))))

  (global-set-key (kbd "<f5>") 'tlc/new-empty-buffer)
#+end_src

*** customize Settings

#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Emacs `customize` settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

Random stuff set by the Emacs =customize= interface. Could probably be
refactored out to somewhere else.

#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(coffee-tab-width 2)
   '(muse-project-alist nil)
   '(show-paren-mode t)
   '(tool-bar-mode nil))

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_src

*** Load OS-specific files

This defines a system-specific file by OS type (Windows, Mac, etc.) so
specific settings can be overridden.

#+begin_src emacs-lisp
  (let ((system-file (concat user-emacs-directory
                             "settings-os-" (subst-char-in-string ?/ ?- (symbol-name system-type)) ".el")))
    (if (file-exists-p system-file)
      (load-file system-file)))
#+end_src

***** System-Specific FIle - Linux

#+begin_src emacs-lisp :tangle settings-os-gnu-linux.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; OS-specific settings - Linux
  ;; Tangled from init.org - do not modify directly
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (provide 'settings-os-gnu-linux)
#+end_src

***** System-Specific File - Windows

#+begin_src emacs-lisp :tangle settings-os-windows-nt.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; OS-specific settings - Windows
  ;; Tangled from init.org - do not modify directly
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (provide 'settings-os-windows-nt)
#+end_src

***** System-Specific File - MacOS X

#+begin_src emacs-lisp :tangle settings-os-darwin.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; OS-specific settings - MacOS X
  ;; Tangled from init.org - do not modify directly
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (provide 'settings-os-darwin)
#+end_src

*** Load system-specific files

This defines a system-specific file by hostname (work computer, home computer,
etc). If these are present, the correct one is loaded.

#+begin_src emacs-lisp
  (let ((system-file 
         (concat user-emacs-directory 
                 "settings-system-" 
                 (replace-regexp-in-string "\\.local" "" (downcase (system-name))) 
                 ".el")))
    (if (file-exists-p system-file)
        (progn
          (load-file system-file))))
#+end_src


***** System-Specific Settings - Home Laptop (MacBook Pro)

#+begin_src emacs-lisp :tangle settings-system-wonderland.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; System-specific settings - home Lenovo laptop (wonderland)
  ;; Tangled from init.org - do not modify directly
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq user-mail-address "tammymakesthings@gmail.com")
  (setq user-name "Tammy Cravit")
  (setq user-domain "tammymakesthings.com")
  (setq user-organisation "Tammy Makes Things")

  (provide 'settings-system-wonderland)
#+end_src

***** System-Specifig Settings - Lab VPS (tmtlab)

#+begin_src emacs-lisp :tangle settings-system-tmtlab.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; System-specific settings - lab VPS (tmtlab)
  ;; Tangled from init.org - do not modify directly
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq user-mail-address "tammymakesthings@gmail.com")
  (setq user-full-name "Tammy Cravit")
  (setq user-domain "tammymakesthings.com")
  (setq user-organisation "Tammy Makes Things")

  (provide 'settings-system-tmtlab)
#+end_src

***** System-Specific Settings - Work Laptop (LT2000002779)

#+begin_src emacs-lisp :tangle settings-system-lt2000002779.el
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; System-specific settings - work laptop (LTXXXX)
  ;; Tangled from init.org - do not modify directly
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq user-mail-address "tammy.cravit@azblue.com")
  (setq user-full-name "Tammy Cravit")
  (setq user-domain "azblue.com")
  (setq user-organisation "Blue Cross Blue Shield of Arizona")
  (setq user-login-name "CORP\\tcravi01")

  (provide 'settings-system-lt2000002779)
#+end_src

*** And we're done!

#+begin_src emacs-lisp
  (message "init.el fully executed")
#+end_src



